<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello-world</title>
    <url>/2020/04/13/hello-world/</url>
    <content><![CDATA[<hr>
<h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>hello world</p>
<a id="more"></a>  
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="hello-hexo-im-younge"><a href="#hello-hexo-im-younge" class="headerlink" title="hello hexo ,im younge"></a>hello hexo ,im younge</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Markdown使用方法</title>
    <url>/2020/04/14/Markdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown使用方法</p>
<a id="more"></a>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><em>加斜</em><br><strong>加粗</strong><br><strong><em>加粗加斜</em></strong><br><del>删除线</del></p>
<hr>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><h2 id="下划线-1"><a href="#下划线-1" class="headerlink" title=" 下划线  "></a> <u>下划线</u>  </h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>123[^123]<br>[^123]:1233445667  </p>
<hr>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>123</li>
<li>1234</li>
<li>123</li>
</ul>
<ol>
<li><p>1234</p>
</li>
<li><p>234</p>
</li>
<li><p>123  </p>
<ul>
<li>123  </li>
<li>123</li>
<li>213  </li>
</ul>
</li>
<li><p>123</p>
<ul>
<li>123</li>
<li>123</li>
</ul>
</li>
</ol>
<hr>
<h3 id="区域块"><a href="#区域块" class="headerlink" title="区域块"></a>区域块</h3><blockquote>
<p>区域块<br>区域块1</p>
<blockquote>
<p>小区域块</p>
<blockquote>
<p>小区域块</p>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>int i=0;
char y</code></pre><hr>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="www.baidu.com">百度</a><br>&lt;<a href="http://www.baidu.com&gt;" target="_blank" rel="noopener">www.baidu.com&gt;</a>  </p>
<h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/" target="_blank" rel="noopener">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>
<hr>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><h2 id=""><a href="#" class="headerlink" title="  "></a><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB ">  </h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">—–</td>
<td align="right"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>​     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>学习计划表</title>
    <url>/2020/04/15/Java%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h3 id="java学习计划表"><a href="#java学习计划表" class="headerlink" title="java学习计划表"></a>java学习计划表</h3><a id="more"></a>
<p> <img src="q8s0ri74t.bkt.clouddn.com/20200415183458.png" alt=" java计划 java"><br> <img src="q8s0ri74t.bkt.clouddn.com/20200415184034.png" alt=" java java ">  </p>
<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><blockquote>
<h2 id="a-week"><a href="#a-week" class="headerlink" title="a week"></a>a week</h2><blockquote>
<ol>
<li>1~2篇博客</li>
<li>狂神Java学习计划</li>
<li>清华大学的数据结构与算法  </li>
<li>清华大学操作系统  </li>
<li>清华大学网络  </li>
</ol>
</blockquote>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2020/04/16/java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="javaSE基础"><a href="#javaSE基础" class="headerlink" title="javaSE基础"></a>javaSE基础</h3><a id="more"></a>

<h3 id="win快捷键"><a href="#win快捷键" class="headerlink" title="win快捷键"></a>win快捷键</h3><pre><code>Win+R----&gt;运行

shift+deldete--&gt;彻底删除

ctrl+shift+esc--&gt;任务管理器

ctrl+A--&gt;全选

ctrl+Z--&gt;撤销</code></pre><h3 id="打开cmd的方式"><a href="#打开cmd的方式" class="headerlink" title="打开cmd的方式"></a>打开cmd的方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​    1.开始+系统+命令提示</span><br><span class="line">​    2.Win键+R输入cmd打开控制台(推荐使用)</span><br><span class="line">​    3.在任意的文件夹下面，按住shift键 +鼠标右键点击，在此处打开命令行窗口</span><br><span class="line">​    4.资源管理器的地址栏前面加上cmd路径</span><br><span class="line">​     管理员方式运行:选择以管理员方式运行</span><br></pre></td></tr></table></figure>

<h3 id="B与b的区别"><a href="#B与b的区别" class="headerlink" title="B与b的区别"></a>B与b的区别</h3><ul>
<li><p>B=byte,等于B=b；</p>
</li>
<li><p>b=bit，位，计算机最小储存单位</p>
</li>
</ul>
<h3 id="常量修饰符"><a href="#常量修饰符" class="headerlink" title="常量修饰符"></a>常量修饰符</h3><ul>
<li><p>final ：初始化后，其值不再改变</p>
</li>
<li><p>static final ：真正意义上的常量，在对象初始化之前存在，即在类加载到方法区时即存在</p>
</li>
</ul>
<h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a><strong><em>变量命名规范</em></strong></h3><blockquote>
<ul>
<li>所有的变量，方法，类名：见名知章</li>
<li>类成员变量：首字母小写与驼峰原则：monthSalary 除了第一个单词外，后面的单词首字母均大写</li>
<li>局部变量：首字母小写与驼峰原则</li>
<li>常量：<em>大写字母与下划线MAX_VALUE</em></li>
<li>类名：首字母大写与驼峰原则：Man，GoodMan；</li>
<li>方法名：首字母小写和驼峰原则：run（），runRun（）；</li>
</ul>
</blockquote>
<h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><blockquote>
<ul>
<li><p>为了更好的组织类，Java提供了包机制，用与区别类名的命名空间</p>
</li>
<li><p>包语句的语句格式：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3...]]</span><br></pre></td></tr></table></figure>
</li>
<li><p>一般公司域名倒置作为包名：site.tgkw.***</p>
</li>
<li><p>为了能够使用某个包的成员，我们需要用import语句来导入包；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">package</span> pkg1[.pkg2[.pkg3...]]</span><br></pre></td></tr></table></figure>


</li>
</ul>
</blockquote>
<h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><blockquote>
<p>用于生成自己的API文档</p>
<blockquote>
<ul>
<li><p>参数信息</p>
<blockquote>
<p>@author 作者</p>
<p>@versio 版本号</p>
<p>@since 指明最早使用的jdk版本</p>
<p>@param 参数名</p>
<p>@return 返回值情况</p>
<p>@throws 异常抛出情况</p>
</blockquote>
</li>
</ul>
</blockquote>
</blockquote>
<h3 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h3><blockquote>
<ul>
<li><p>next ()</p>
<blockquote>
<ol>
<li>一定要读取到有效字符后才可以结束输入</li>
<li>对输入有效数字前的空白，next()会自动去掉</li>
<li>只有输入有效字符后输入的空白才能作为分割符与结束符</li>
<li>next（）不能得到带有空格的字符串</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p>nextLine()</p>
<blockquote>
<ol>
<li>以Enter为结束符，也就是说nextLine（）方法返回的是输入回车前的所有字符</li>
<li>可以获取空白</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>  younge</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//我们可以输入多个数字，并求其总和与平均数，每输入一个数字就用回车确认，通过输入非数字来接受输入并输出执行结果；</span></span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span>  m=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(scanner.hasNextDouble())&#123;</span><br><span class="line">           <span class="keyword">double</span> x=scanner.nextDouble();</span><br><span class="line">           sum=sum+x;</span><br><span class="line">           m++;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(m+<span class="string">"个数的和为"</span>+sum);</span><br><span class="line">       System.out.println(m+<span class="string">"个数的平均值"</span>+(sum/m));</span><br><span class="line">       scanner.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句：表达式)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String name&#x3D;&#39;abcdzfv&#39;;</span><br><span class="line">i&#x3D;0;</span><br><span class="line">for(int vo:name)&#123;</span><br><span class="line"> i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="break-contiune"><a href="#break-contiune" class="headerlink" title="break contiune"></a>break contiune</h3><blockquote>
<ol>
<li>break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。(break语 句也在switch语句中使用)</li>
<li>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一-次是否执行循环的判定。</li>
</ol>
</blockquote>
<h3 id="java方法"><a href="#java方法" class="headerlink" title="java方法"></a>java方法</h3><blockquote>
<p>调用方法：对象名.方法名（实参列表）</p>
<p>java支持两种调用方式，根据方法是否返回值来选择</p>
<blockquote>
<ul>
<li><em>当方法返回一个值的时候，方法调用通常被当做一个值，例如：</em></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">int</span> larger=max(<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>当方法返回值是void，方法调用一定是一条语句</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello,kuangshen!"</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><blockquote>
<ul>
<li><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数</p>
</li>
<li><p>方法重载的规则</p>
<blockquote>
<p>◆方法名称必须相同。<br>◆参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。<br>◆方法的返回类型可以相同也可以不相同。<br>◆仅仅返回类型不同不足以成为方法的重载。</p>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p>重载的实现理论</p>
<blockquote>
<p>◆方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对<br>应的方法，如果匹配失败，则编译器报错。</p>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h3><blockquote>
<ul>
<li><p>有时希望一个程序运行时再传递给它信息，这要靠传递命令行参数给main（）函数实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">            System.out.println(arg[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><blockquote>
<ul>
<li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li>
<li>在方法声明中，在指定参数类型后加一个省略号(..)。</li>
<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它<br>之前声明。</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... numbers)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(number.length==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote>
<p>◆A方法调用B方法，我们很容易理解!</p>
<p>◆递归就是: A方法调用A方法!就是自己调用自己</p>
<p>◆利用递归可以用简单的程序来解决-些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题 相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</p>
<p>◆递归结构包括两个部分:</p>
<blockquote>
<p>◆递归头:什么时候不调用自身方法。如果没有头,将陷入死循环。<br>◆递归体:什么时候需要调用自身方法。</p>
</blockquote>
</blockquote>
<h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><blockquote>
<p>◆数组是相同类型数据的有序集合.<br>◆数组描述的是相同类型的若干个数据,按照一定的先后次序排列组合而成。<br>◆其中,每一个数据称作一个数组元素,每个数组元素可以通过一个下标来访问它们。</p>
</blockquote>
<h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><blockquote>
<p>JAVA内存</p>
<ul>
<li><p>堆</p>
<blockquote>
<ol>
<li>存放new的对象与数组</li>
<li>可以被所有的线程共享，不会存放别的线程引用</li>
</ol>
</blockquote>
</li>
<li><p>栈</p>
<blockquote>
<ol>
<li>存放基本变量类型（包括这个基本变量的具体数值）</li>
<li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
</ol>
</blockquote>
</li>
<li><p>方法区</p>
<blockquote>
<ol>
<li>会被使用的线程共享（所以static方法可以不用指定类，直接调用）</li>
<li>包含所有的class，和static变量</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><blockquote>
<ul>
<li><p>数组的工具类java.util.Arrays</p>
</li>
<li><p>由于数组对象本身并没有什么方法可以供我们调用,但API中提供了-一个工具类Arrays供我们使<br>用,从而可以对数据对象进行一些基本的操作。</p>
</li>
<li><p>查看JDK帮助文档</p>
</li>
<li><p>Arrays类中的方法都是static修饰的静态方法,在使用的时候可以直接使用类名进行调用,而”不<br>  用”使用对象来调用(注意:是”不用”而不是“不能”)</p>
</li>
<li><p>具有以下常见功能</p>
<blockquote>
<ul>
<li>给数组赋值:通过fill方法。</li>
<li>对数组排序:通过sort方法，按升序。</li>
<li>比较数组:通过equals方法比较数组中元素值是否相等。</li>
<li>查找数组元素:通过binarySearch方法能对排序好的数组进行分查找法操作。</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote>
<ul>
<li><p>面向对象（Object-Oriented Programming,oop）的本质</p>
<blockquote>
<p>以类的方式组织代码，以对象的形式封装数据</p>
</blockquote>
</li>
<li><p>三大特性</p>
<blockquote>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h3><blockquote>
<ul>
<li><p>使用new关键字创建对象</p>
</li>
<li><p>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化<br>以及对类中构造器的调用。</p>
</li>
<li><p>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩<br>个特点:</p>
<blockquote>
<ul>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写void</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote>
<ul>
<li><p>将实例变量（属性）设为私有，然后加入公开的set/get方法来设置（获取）实例变量的值</p>
</li>
<li><p>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉;低耦合:仅暴露少量的方法给外部使用。</p>
</li>
<li><p>封装(数据的隐藏)</p>
<blockquote>
<ul>
<li>通常，应禁止直接访问-一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>
</ul>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&#x2F;&#x2F;ctrl+insert自动生成get&#x2F;set</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;package site.oop.Demo2;</span><br><span class="line">&gt;&#x2F;&#x2F;学生类</span><br><span class="line">&gt;public class Student &#123;</span><br><span class="line">   &#x2F;&#x2F;属性：字段</span><br><span class="line">   &#x2F;&#x2F;属性私有</span><br><span class="line">  private String name;</span><br><span class="line">  &#x2F;&#x2F;提供允许可以操作属性的一些方法</span><br><span class="line">   &#x2F;&#x2F; 提供一些public的get，set方法</span><br><span class="line">   &#x2F;&#x2F;get获得这个数据</span><br><span class="line">   &#x2F;&#x2F;set给这个属性赋值</span><br><span class="line">   public String getName()&#123;</span><br><span class="line">       return  this.name;</span><br><span class="line">   &#125;</span><br><span class="line">   public  void setName(String name)&#123;</span><br><span class="line">       this.name&#x3D;name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote>
<ul>
<li><p>继承的本质是对某批类的抽象， 从而实现对现实世界更好的建模。</p>
</li>
<li><p>extends的意思是“扩展”。子类是父类的扩展。</p>
</li>
<li><p>JAVA中类只有单继承，没有多继承!</p>
</li>
<li><p>继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等。</p>
</li>
<li><p>继承关系的俩个类，-个为子类(派生类),一个为父类(基类)。 子类继承父类,使用关键字extends来表示。</p>
</li>
<li><p>子类和父类之间，从意义上讲应该具有”is a”的关系.</p>
</li>
</ul>
<ul>
<li><p>object类</p>
</li>
<li><p>super- this</p>
</li>
<li><p>方法重写:重点—&gt;多态</p>
</li>
<li><p>super注意点：</p>
<blockquote>
<ol>
<li>super调用父类的构造方法，必须在构造方法的第-一个</li>
<li>super必须只能出现在子类的方法或者构造方法中! </li>
<li>super和this不能同时调用构造方法!</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p>super vs this 注意点</p>
<blockquote>
<ul>
<li><p>代表对象不同</p>
<blockquote>
<p>this:本身调用者这个对象</p>
<p>super:代表父类对象的应用</p>
</blockquote>
</li>
<li><p>前提不同</p>
<blockquote>
<p>this:没哟继承也可以使用</p>
<p>super:只能在继承条件才可以使用</p>
</blockquote>
</li>
<li><p>构造方法不同</p>
<blockquote>
<p>this:本类构造方法</p>
<p>super:父类构造方法</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p>重写(子类重写父类的方法)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重写快捷键:Alt+Inert:override</span><br></pre></td></tr></table></figure>



</li>
</ul>
<blockquote>
<ol>
<li><p>方法名必须相同</p>
</li>
<li><p>参数列表列表相同</p>
</li>
<li><p>修饰符:范围可以扩大不能缩小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public&gt;protected&lt;Default&lt;Private</span><br></pre></td></tr></table></figure>
</li>
<li><p>抛出异常:范围可以缩小不能扩大</p>
</li>
</ol>
</blockquote>
</blockquote>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote>
<ul>
<li><p>即同- -方法可以根据发送对象的不同而采用多种不同的行为方式。</p>
</li>
<li><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</p>
</li>
<li><p>多态存在的条件</p>
<blockquote>
<ul>
<li>有继承关系</li>
<li>子类重写父类方法</li>
<li>父类引用指向子类对象</li>
</ul>
</blockquote>
</li>
<li><p>注意:多态是方法的多态，属性没有多态性。</p>
</li>
<li><p>instanceof</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.oop.Demo3;</span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money=<span class="number">10_0000_0000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"说了一句话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ctrl+H</span></span><br><span class="line"><span class="comment">//私有的东西无法被继承</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.oop.Demo3;</span><br><span class="line"><span class="comment">//学生is人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我没有说话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.say();</span><br><span class="line">        <span class="keyword">super</span>.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><blockquote>
<ul>
<li>abstract修饰符可以用来修饰方法也可以修饰类,如果修饰方法,那么该方法就是抽象方法;如果<br>修饰类，那么该类就是抽象类。</li>
<li>抽象类中可以没有抽象方法,但是有抽象方法的类一定要声明为抽象类。</li>
<li>抽象类,不能使用new关键字来创建对象,它是用来让子类继承的。</li>
<li>抽象方法，只有方法的声明,没有方法的实现,它是用来让子类实现的。</li>
<li>子类继承抽象类,那么就必须要实现抽象类没有实现的抽象方法,否则该子类也要声明为抽象类。</li>
</ul>
</blockquote>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote>
<ul>
<li><p>普通类:只有具体实现</p>
</li>
<li><p>抽象类:具体实现和规范(抽象方法)都有!</p>
</li>
<li><p>接口:只有规范!自己无法写方法<del>专业的约束!约束和实现分离:面向接口编程</del></p>
</li>
<li><p>接口是抽象类,只有规范,如果有非抽象类implements了接口类,则必须要重载其规范(重载为方法).</p>
</li>
<li><p>接口就是规范，定义的是一组规则，体现了现实世界中”如果你…则必须能..的思想。如果你是天使，<br>则必须能飞。如果你是汽车，则必须能跑。如果你好人，则必须干掉坏人:如果你是坏人，则必须欺负好人。</p>
</li>
<li><p>接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。</p>
</li>
<li><p>oo的精髓，是对对象的抽象，最能体现这一点的就是接口。 为什么我们讨论设计模式都只针对具备了抽象能力的语言(比如C++、 java. c#等) ，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package site.oop.Demo7;</span><br><span class="line">&#x2F;&#x2F;interface定义的关键字,接口都需要有实现类</span><br><span class="line">&#x2F;&#x2F;抽象的思维~Java架构师</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">  &#x2F;&#x2F;接口中的所有定义其实都是抽象的public abstract</span><br><span class="line">    void add(String name);</span><br><span class="line">    void delete(String name);</span><br><span class="line">    void update(String name);</span><br><span class="line">    void query(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package site.oop.Demo7;</span><br><span class="line">&#x2F;&#x2F;抽象类：extends</span><br><span class="line">&#x2F;&#x2F;类 可以实现接口implements接口</span><br><span class="line">&#x2F;&#x2F;实现了接口的类就必修要重写接口的方法</span><br><span class="line">&#x2F;&#x2F;多继承~利用接口实现</span><br><span class="line">public class UerServiceImpl implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void add(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void delete(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void update(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void query(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a><strong>异常机制</strong></h3><blockquote>
<ul>
<li><p>异常分类</p>
<blockquote>
<ul>
<li><p>检查性异常</p>
<blockquote>
<p>检查性异常:最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。<br>例如要打开一一个不存在文件时，-一个异常就发生了，这些异常在编译时不能被简单地忽略。</p>
</blockquote>
</li>
<li><p>运行时异常</p>
<blockquote>
<p>运行时异常:运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在<br>编译时被忽略。</p>
</blockquote>
</li>
<li><p>错误ERRO</p>
<blockquote>
<p>错误ERROR:错误不是异常， 而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，<br>当栈溢出时， -一个错误就发生了，它们在编译也检查不到的。</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//ctrl+alt+T自动生成异常捕获</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>反编译方法</title>
    <url>/2020/04/16/%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>反编译方法</p>
<a id="more"></a>

<p>1将class文件通过文件层移动到一个idea能够找到的位置</p>
<p>2移动后idea如下</p>
<p>3双击idea中的class文件即可得到反编译的java文件</p>
<p><img src="C:%5CUsers%5Cyounge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200416205225570.png" alt="image-20200416205225570"></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>javaGui基础</title>
    <url>/2020/04/20/javaGui%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>JAVAGUI</p>
<a id="more"></a>  

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[javaGui] --&gt;B(AWT)</span><br><span class="line">A[javaGui] --&gt;C(Spring)</span><br><span class="line">B(AWT)--&gt;D(Frame)    </span><br><span class="line">C(Spring)--&gt;E(JErame)</span><br></pre></td></tr></table></figure>





<h3 id="面板panel"><a href="#面板panel" class="headerlink" title="面板panel"></a>面板panel</h3><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//panel可以看作一个空间但不能单独存在，依赖与frame</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> Frame();</span><br><span class="line">        <span class="comment">//布局的概念</span></span><br><span class="line">        Panel panel1=<span class="keyword">new</span> Panel();</span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//设置panel坐标，相对frame</span></span><br><span class="line">        panel1.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        panel1.setBackground(<span class="keyword">new</span> Color(<span class="number">62</span>, <span class="number">40</span>, <span class="number">187</span>));</span><br><span class="line">        <span class="comment">//frame.add(panel1)</span></span><br><span class="line">        frame.add(panel1);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//监听事件</span></span><br><span class="line">        <span class="comment">//适配器模式</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//窗口点击关闭时需要做的事情</span></span><br><span class="line">               System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[布局管理器] --&gt;B(流式布局)</span><br><span class="line">A --&gt;C(东南西北中)</span><br><span class="line">A --&gt;D(表格布局)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结</p>
<blockquote>
<ol>
<li><p>Frame是-一个顶级窗口</p>
</li>
<li><p>Panel无法单独显示，必须添加到某个容器中。</p>
</li>
<li><p>布局管理器</p>
<blockquote>
<ol>
<li>流式  FlowLayout</li>
<li>东西南北中 BorderLayout</li>
<li>表格  GridLayout </li>
</ol>
</blockquote>
</li>
</ol>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<ol start="4">
<li>大小，定位，背景颜色，可见性，监听!</li>
</ol>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGridLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"TestBordLayout"</span>);</span><br><span class="line">        Button btn1 = <span class="keyword">new</span> Button(<span class="string">"btn1"</span>);</span><br><span class="line">        Button btn2 = <span class="keyword">new</span> Button(<span class="string">"btn2"</span>);</span><br><span class="line">        Button btn3 = <span class="keyword">new</span> Button(<span class="string">"btn3"</span>);</span><br><span class="line">        Button btn4 = <span class="keyword">new</span> Button(<span class="string">"btn4"</span>);</span><br><span class="line">        Button btn5 = <span class="keyword">new</span> Button(<span class="string">"btn5"</span>);</span><br><span class="line">        Button btn6 = <span class="keyword">new</span> Button(<span class="string">"btn6"</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line">        frame.pack();<span class="comment">//java函数，自动布局填充；</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[事件监听] --&gt;B(输入框监听TextField)</span><br><span class="line">A --&gt;C(鼠标监听)</span><br><span class="line">A --&gt;D(键盘监听)</span><br><span class="line">A --&gt;E(窗口监听)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTextEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> MyFrame();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span> <span class="keyword">throws</span> HeadlessException </span>&#123;</span><br><span class="line">        TextField textField = <span class="keyword">new</span> TextField();</span><br><span class="line">        add(textField);<span class="comment">//在frame上增加了一个文本框，但没有办法监听输入</span></span><br><span class="line">        <span class="comment">//监听文本框输入</span></span><br><span class="line">        MyActionListener2 myActionListener2 = <span class="keyword">new</span> MyActionListener2();</span><br><span class="line">        <span class="comment">//按下enter就会触发这个输入框的事件</span></span><br><span class="line">        textField.addActionListener(myActionListener2);<span class="comment">//给文本框增加监听</span></span><br><span class="line">        <span class="comment">//增加一个对关闭键的事件</span></span><br><span class="line">        ShoutDown shoutDown = <span class="keyword">new</span> ShoutDown();</span><br><span class="line">        addWindowListener(shoutDown);</span><br><span class="line">        <span class="comment">//设置替换框编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">'*'</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener2</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">      TextField field=(TextField) e.getSource();<span class="comment">//获得一些资源,返回一些对象</span></span><br><span class="line">        System.out.println(field.getText());<span class="comment">//获得输入框的文本</span></span><br><span class="line">        field.setText(<span class="string">""</span>);<span class="comment">//设置文本每次输入后清空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoutDown</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h2><h3 id="jframe"><a href="#jframe" class="headerlink" title="jframe"></a>jframe</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJframe2</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span> .setBounds( x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="number">200</span>, height: <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">this</span> . setVisible(<span class="keyword">true</span>);</span><br><span class="line">    JLabel <span class="number">1</span>abel = <span class="keyword">new</span> JLabel( text: “欢迎米到狂神说Java系列节目<span class="string">");</span></span><br><span class="line"><span class="string">    this . add(1abe1);</span></span><br><span class="line"><span class="string">    //让文术标签居中,设置水平对齐</span></span><br><span class="line"><span class="string">    label. setHorizontalAlignment (SwingConstants .CENTER);</span></span><br><span class="line"><span class="string">    //获得一个容器</span></span><br><span class="line"><span class="string">    Container container = this. getContentPane();</span></span><br><span class="line"><span class="string">    container. setBackground(Color . YELLOW);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DialogDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">this</span>.setSize( width: <span class="number">700</span>, height: <span class="number">500</span>) ;</span><br><span class="line">  <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class="comment">//设置关闭</span></span><br><span class="line">  <span class="comment">//JFrame放东西，容器</span></span><br><span class="line">  Container container = <span class="keyword">this</span>. getContentPane();</span><br><span class="line">  <span class="comment">//绝对布局</span></span><br><span class="line">  container.setlayout (nu11);</span><br><span class="line">  <span class="comment">//按钮</span></span><br><span class="line">  JButton button = <span class="keyword">new</span> JButton( text: <span class="string">"点击弹出一个对话框"</span>); <span class="comment">//创建</span></span><br><span class="line">  button.setBounds( x: <span class="number">30</span>, y: <span class="number">30</span>, width: <span class="number">200</span>, height: <span class="number">50</span>);</span><br><span class="line">  <span class="comment">//点击这个按钮的时候，弹出一个弹窗</span></span><br><span class="line">  button.addActionListener(<span class="keyword">new</span> ActionListener() &#123; <span class="comment">//</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">  container.add(button);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> JLabl(<span class="string">"xxx"</span>);</span><br></pre></td></tr></table></figure>



<h3 id="图标与图片"><a href="#图标与图片" class="headerlink" title="图标与图片"></a>图标与图片</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageIconDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ImageIconDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//获收图片的地址</span></span><br><span class="line">    JLabel label = <span class="keyword">new</span> JLabel( text: <span class="string">"ImageIcon"</span>);</span><br><span class="line">    URL url=ImageIconDemo.class.getResource(name:"tx.jpg");</span><br><span class="line">    ImageIcon imageIcon = <span class="keyword">new</span> ImageIcon(ur1);  </span><br><span class="line">    label. setIcon( imageIcon);</span><br><span class="line">    label.setHorizontalAlignment(SwingConstants . CENTER);<span class="comment">//设置图片位置居中</span></span><br><span class="line">    Container container. = getContentPane();</span><br><span class="line">    container.add(label);</span><br><span class="line">    setVisible(<span class="keyword">true</span>);</span><br><span class="line">    setDefaultCloseoperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    setBounds( x:<span class="number">100</span>,y:<span class="number">100</span>,width:<span class="number">200</span>,height:<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jpanel"><a href="#jpanel" class="headerlink" title="jpanel"></a>jpanel</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JPanelDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line">  container.setLayout(<span class="keyword">new</span> GridLayout( rows2, col1, hgap:<span class="number">1</span>, vgap1:));</span><br><span class="line">  JPanel panel1 = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout( rows:<span class="number">1</span>, col3));</span><br><span class="line">  pane11. add(<span class="keyword">new</span> JButton( text: <span class="string">"1"</span> ));</span><br><span class="line">  panel1. add(<span class="keyword">new</span> JButton( text: <span class="string">"1"</span>));</span><br><span class="line">  panel1. add(<span class="keyword">new</span> JButton( text <span class="string">"1"</span>));</span><br><span class="line">  container.add( panel1);</span><br><span class="line">  <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">  <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br></pre></td></tr></table></figure>

<h3 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h3><blockquote>
<p>//在panl下可以实现，但frame与container下不一定实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrollDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">JScrollDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line">    <span class="comment">//文本域</span></span><br><span class="line">    JTextArea textArea = <span class="keyword">new</span> JextArea( rows: <span class="number">20</span>,<span class="number">1</span> columns: <span class="number">50</span>) ;</span><br><span class="line">    textArea.setText(<span class="string">"欢迎学习狂神说Java"</span>);</span><br><span class="line">    <span class="comment">//Scroll面板</span></span><br><span class="line">    JScrollPane scrollPane = newJScrollPane(textArea) ;</span><br><span class="line">    container.add(scrollPane);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setBounds( X: <span class="number">100</span>, VE <span class="number">100</span>, width: <span class="number">300</span>, height: <span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ ON_ CLOSE);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JScrollDemo();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span>. getContentPane();</span><br><span class="line">    <span class="comment">//将个图片变为图标</span></span><br><span class="line">    URL resource = JButtonDemo01. class . getResource( name: "tx. jpg");</span><br><span class="line">    Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line">    <span class="comment">//把这个图标放在按钮上:</span></span><br><span class="line">    JButton button = <span class="keyword">new</span> JButton();</span><br><span class="line">    button.setIcon(icon);</span><br><span class="line">    button.setToolTipText(<span class="string">"图片按钮"</span>);</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    container.add(button);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setsize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">this</span>.<span class="function">setDefaultCloseoperat <span class="title">ion</span><span class="params">(WindowConstants . EXIT ON_ CLOSE)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JButtonDemo01( );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line"><span class="comment">//单选框</span></span><br><span class="line">JRadioButton radioButton1 = <span class="keyword">new</span> JRadioButton( text: <span class="string">"JRadioButton01"</span>);</span><br><span class="line">JRadioButton radioButton2 = <span class="keyword">new</span> JRadioButton( text: <span class="string">"JRadioButton02"</span>);</span><br><span class="line">JRadioButton radioButton3 = <span class="keyword">new</span> JRadioButton( text: <span class="string">"JRadioButton03"</span>);</span><br><span class="line"><span class="comment">//山于单选框只能选择“个， 分组,一个组中只能选择 。 个</span></span><br><span class="line">ButtonGroup group = <span class="keyword">new</span> ButtonGroup( );</span><br><span class="line">group.add(radioButton1) ;</span><br><span class="line">group.add(radioButton2);</span><br><span class="line">group.add(radioButton3);</span><br><span class="line">container.add(radioButton1,Borderlayout.CENTER);</span><br><span class="line">container.add(radioButton2,BorderLayout.NORTH);</span><br><span class="line">container.add( radioButton3,BorderLayout.SOUTH) ;</span><br><span class="line"><span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span>.setSize( width: <span class="number">500</span>, height <span class="number">300</span>);</span><br><span class="line"><span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ ON_ CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> JButtonDemo02();</span><br></pre></td></tr></table></figure>



<h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt. <span class="number">5</span></span><br><span class="line"><span class="keyword">import</span> j ava。net。URL;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo03</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line"><span class="comment">//将“个 图片变为图标</span></span><br><span class="line">URL resource = JButtonDemo01 . class . getResource( name: "tx.jpg" );</span><br><span class="line">Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line"><span class="comment">//多选框</span></span><br><span class="line">JCheckBox checkBox01 = <span class="keyword">new</span> JCheckBox( text”checkBox01<span class="string">");</span></span><br><span class="line"><span class="string">JCheckBox checkBox02 = new JCheckBox( text”checkBox02"</span> );</span><br><span class="line">container，add( checkBox01，BorderL ayout . NORTH);</span><br><span class="line">container . add( checkBox02, BorderLayout . SOUTH);</span><br><span class="line"><span class="keyword">this</span>。setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span> . setSize( width: <span class="number">500</span>, height <span class="number">300</span>);</span><br><span class="line"><span class="keyword">this</span> . setDefaultCloseOperation(WindowConstants . EXIT .ON_ CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> JButtonDemo03( );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span>. getContentPane();</span><br><span class="line">    JComboBox status = <span class="keyword">new</span> JComboBox();</span><br><span class="line">    status.addItem( nu11);</span><br><span class="line">    status.addItem(<span class="string">"正在热映"</span>);</span><br><span class="line">    status.addItem(<span class="string">"已下架"</span>);|</span><br><span class="line">    status.addItem(<span class="string">"即将上映"</span>);</span><br><span class="line">    container.add(status);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setSize( width: <span class="number">500</span>，height: <span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants. EXIT_ ON CLOSE);</span><br></pre></td></tr></table></figure>



<h3 id="列表框"><a href="#列表框" class="headerlink" title="列表框"></a>列表框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo02</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line">    <span class="comment">//生成列表的内容</span></span><br><span class="line">    <span class="comment">//String[] contents = &#123;"1","2", "3"&#125;;</span></span><br><span class="line">    Vector&lt;object&gt;contents = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    <span class="comment">//列表中需要放入内容</span></span><br><span class="line">    JList jList = <span class="keyword">new</span> JList(contents);</span><br><span class="line">    container. add(jList);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setSize( width: <span class="number">500</span>, height: <span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants. EXIT ON_ CLOSE);</span><br></pre></td></tr></table></figure>



<h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrol1Demo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> JScro11DemoO&#123;</span><br><span class="line">    Container container =<span class="keyword">this</span>.getContentPaneO;</span><br><span class="line">    <span class="comment">//文本域</span></span><br><span class="line">    JTextarea textarea = <span class="keyword">new</span> JTextArea(<span class="number">20</span>， <span class="number">50</span>);</span><br><span class="line">    textArea.setText(<span class="string">"younge"</span>);</span><br><span class="line">    <span class="comment">//scro11面板</span></span><br><span class="line">    JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane (textArea);</span><br><span class="line">    container. add(scro11Pane);</span><br><span class="line">    <span class="keyword">this</span>. setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>. setBounds (<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>. <span class="function">setDefaultcloseoperati <span class="title">on</span> <span class="params">(windowConstants. EXIT ON CLOSE)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JScrol1Demo();</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>























]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>各种视图</title>
    <url>/2020/04/20/%E5%90%84%E7%A7%8D%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<p>流程图</p>
<a id="more"></a>  

<hr>
<p>title: Markdown使用方法<br>date: 2020-04-14 17:13:24<br>tags: markdown</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>








]]></content>
  </entry>
  <entry>
    <title>e.getSource()理解</title>
    <url>/2020/04/20/e.getSource%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>e.getSource()理解</p>
<a id="more"></a>  

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * The object on which the Event initially occurred.</span><br><span class="line">     *</span><br><span class="line">     * @return   The object on which the Event initially occurred.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Object getSource() &#123;</span><br><span class="line">        return source;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其返回类型为object类型，即可以转换为任意其他类型，返回的object类型source为从鼠键屏事件所发出的事件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">         MyFrame myFrame=(MyFrame) e.getSource();</span><br><span class="line">         <span class="comment">//这样当在界面点击时即会产生点</span></span><br><span class="line">           <span class="keyword">new</span> Point(e.getX(),e.getY());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>‘MyFrame myFrame=(MyFrame) e.getSource()’ ;  把事件源转换成你点击的那个对象类。这样你的a就可以用MyFrame里面的变量与方法了。<br>如果你有许多控件事件，这样写还可以区分你获得的是哪个控件事件的事件源。JButton a=</p>
</blockquote>
]]></content>
      <tags>
        <tag>java.GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>java网络编程基础</title>
    <url>/2020/04/22/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="java网络编程基础"><a href="#java网络编程基础" class="headerlink" title="java网络编程基础"></a>java网络编程基础</h1><a id="more"></a>  

<h3 id="1-网络编程要素"><a href="#1-网络编程要素" class="headerlink" title="1.网络编程要素"></a>1.网络编程要素</h3><blockquote>
<ul>
<li><p>如何实现网络通信</p>
<blockquote>
<p>通信双方地址:ip+端口号/192.168.124:8080</p>
<p>规则:网络通信协议:tcp/ip</p>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<p>TCP/IP四层概念模型</p>
<blockquote>
<ul>
<li><p>应用层</p>
<blockquote>
<ol>
<li>应用层决定了向用户提供应用服务时通信的活动</li>
<li>FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name Syst em，域名系统）服务就是其中两类。HTTP 协议也处于该层。  </li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p>传输层</p>
<blockquote>
<ol>
<li>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</li>
<li>在传输层有两个性质不同的协议：TCP（Transmission Control Pr otocol，传输控制协议）和 UDP（User Data Protocol，用户数据 报协议）。 </li>
</ol>
</blockquote>
</li>
<li><p>网络层</p>
<blockquote>
<ol>
<li>网络层用来处理在网络上流动的数据包。数据包是网络传输的 小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到 达对方计算机，并把数据包传送给对方。 </li>
<li>网络层所起的作用就是在众多的选项内选择一条传输路线。 </li>
</ol>
</blockquote>
</li>
<li><p>数据链路层</p>
<blockquote>
<ol>
<li>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备 驱动、NIC（Network Interface Card，网络适配器，即网卡）， 及光纤等物理可见部分（还包括连接器等一切传输媒介）。</li>
<li>。硬件 上的范畴均在链路层的作用范围之内。</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
</blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200422094512.png" alt=""></p>
<blockquote>
<p>我们用 HTTP 举例来说明，首先作为发送端的客户端在应用层（ HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。 接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到 的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记 序号及端口号后转发给网络层。 在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发 给链路层。这样一来，发往网络的通信请求就准备齐全了。 接收端的服务器在链路层接收到数据，按序往上层发送，一直到 应用层。当传输到应用层，才能算真正接收到由客户端发送过来 的 HTTP 请求。</p>
</blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200422094814.png" alt=""></p>
<blockquote>
<p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一 个该层所属的首部信息。反之，接收端在层与层传输数据时，每 经过一层时会把对应的首部消去。 这种把数据信息包装起来的做法称为封装（encapsulate）。 </p>
</blockquote>
<h3 id="2ip"><a href="#2ip" class="headerlink" title="2ip"></a>2ip</h3><blockquote>
<ol>
<li><p>ip在Java中所在的类(InetAdress)</p>
<blockquote>
<ul>
<li>唯一定位一台网络上的计算机</li>
<li>127.0.0.1:本机:localhost</li>
<li>ip地址分为:ipv4和ipv6</li>
</ul>
</blockquote>
</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询本机地址</span></span><br><span class="line">            InetAddress inetAddress = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            System.out.println(inetAddress);</span><br><span class="line">            InetAddress inetAddress1 = InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">            System.out.println(inetAddress1);</span><br><span class="line">            InetAddress inetAddress2 = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inetAddress2);</span><br><span class="line">            <span class="comment">//查询网站ip地址</span></span><br><span class="line">            InetAddress inetAddress3 = InetAddress.getByName(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">            System.out.println(inetAddress3);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownHostException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3端口"><a href="#3端口" class="headerlink" title="3端口"></a>3端口</h3><blockquote>
<p>端口表示计算机上一个程序的进程,即计算机会为每一个应用分配一个端口号</p>
<blockquote>
<ul>
<li>不同的进程有着不同的端口号,用于区分应用</li>
<li>端口号:0~65535</li>
<li>TCP与UDP协议下各有65535个端口</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>端口分类</p>
<blockquote>
<p>公有端口:0~1023</p>
<blockquote>
<ul>
<li>HTTP:80</li>
<li>HTTPS:443</li>
<li>FTP:21</li>
<li>Telent:23</li>
</ul>
</blockquote>
<p>程序注册端口:1024~49151,分配给用户或程序</p>
<blockquote>
<ul>
<li>Tomcat:8080</li>
<li>MySQL:3306</li>
<li>Oracle:1521</li>
</ul>
</blockquote>
</blockquote>
<p>动态,私有:49152~65535</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">//<span class="built_in">cmd</span> /user/administrator</span><br><span class="line"><span class="number">1</span> netstat -ano #查看所有的端口</span><br><span class="line"><span class="number">2</span> netstat -ano|<span class="built_in">findstr</span> "<span class="number">5900</span>"</span><br><span class="line"><span class="number">3</span>.tasklist|<span class="built_in">findstr</span> "<span class="number">8696</span>" #查看指定端口的进程</span><br><span class="line"><span class="number">4</span>.ctr1+ <span class="built_in">shift</span> + ESC </span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4通信协议"><a href="#4通信协议" class="headerlink" title="4通信协议"></a>4通信协议</h3><blockquote>
<ul>
<li><p>协议:约定，就好比我们现在说的是普通话。</p>
</li>
<li><p>网络通信协议:速率,传输码率,代码结构，传输控制…. .</p>
</li>
<li><p>问题:非常的复杂?</p>
<p>大事化小:分层!</p>
</li>
<li><p>重要</p>
<blockquote>
<ul>
<li>TCP:用户传输协议(类似打电话)</li>
<li>UDP:用户数据报协议(类似发广播)</li>
</ul>
</blockquote>
</li>
<li><p>TCP Vs UDP</p>
<blockquote>
<p>TCP:打电话</p>
<blockquote>
<ul>
<li>连接,稳定</li>
<li>三次握手四次挥手</li>
<li>客户端、服务端</li>
<li>传输完成，释放连接，效率低</li>
<li><img src="https://gitee.com/yj196/markdown/raw/master/20200422111412.png" alt=""></li>
</ul>
</blockquote>
<p>UDP:发短信</p>
<blockquote>
<ul>
<li>不连接，不稳定</li>
<li>客户端、服务端:没有明确的界限</li>
<li>不管有没有准备好，都可以发给你..</li>
<li>导弹</li>
<li>DDOS: 洪水攻击! (饱和攻击)</li>
</ul>
</blockquote>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="5-TCP"><a href="#5-TCP" class="headerlink" title="5.TCP"></a>5.TCP</h3><blockquote>
<p>客户端</p>
<blockquote>
<ol>
<li>连接服务器Socket</li>
<li>发送消息</li>
</ol>
</blockquote>
<p>服务器</p>
<blockquote>
<ol>
<li>建立服务的端口ServerSocket</li>
<li>等待用户的链接accept</li>
<li>接收用的消息</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InetAddress serverIp=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//要知道服务器地址,服务器端口号</span></span><br><span class="line">            serverIp = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//创建socket连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(serverIp,port);</span><br><span class="line">            <span class="comment">//发送消息 io流</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"小胖啊小胖"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (os!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket=<span class="keyword">null</span>;</span><br><span class="line">        Socket accept=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//要有一个地址,且可以通过socket来连接</span></span><br><span class="line">             serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//等待连接</span></span><br><span class="line">             accept = serverSocket.accept();</span><br><span class="line">            <span class="comment">//读取客户端的消息</span></span><br><span class="line">             is = accept.getInputStream();</span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">             baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (baos!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (accept!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    accept.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="6利用tcp传输文件"><a href="#6利用tcp传输文件" class="headerlink" title="6利用tcp传输文件"></a>6利用tcp传输文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建socket链接</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.建立socket的输出流</span></span><br><span class="line">        OutputStream os=socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.读取文件</span></span><br><span class="line">        FileInputStream fls = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"ironman.jpg"</span>));</span><br><span class="line">        <span class="comment">//4.写出文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fls.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.关闭资源</span></span><br><span class="line">        fls.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//监听客户端的连接</span></span><br><span class="line">        Socket socket=serverSocket.accept();<span class="comment">//阻塞式监听,会一直等待客户端的连接</span></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//文件的输出</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"receive.jpg"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fileOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><blockquote>
<p>和发短信一样,不需要知道对方地址</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package site.tgkw.lesson04;</span><br><span class="line"></span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不需要连接服务器</span><br><span class="line">public class UdpClientTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;建立一个socket</span><br><span class="line">        DatagramSocket socket&#x3D; new DatagramSocket();</span><br><span class="line">        &#x2F;&#x2F;建个包</span><br><span class="line">         String msg&#x3D;&quot;nhafwq&quot;;</span><br><span class="line">        InetAddress localhost &#x3D; InetAddress.getByName(&quot;localhost&quot;);</span><br><span class="line">        int port&#x3D;9090;</span><br><span class="line">        &#x2F;&#x2F;数据,数据的长度始末,要发给谁</span><br><span class="line">        DatagramPacket packet&#x3D; new DatagramPacket(msg.getBytes(),0,msg.length(),localhost,port);</span><br><span class="line">        &#x2F;&#x2F;发送包</span><br><span class="line">         socket.send(packet);</span><br><span class="line">        &#x2F;&#x2F;关闭流</span><br><span class="line">         socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClientTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">//开放端口</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">     <span class="comment">//接受数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">        socket.receive(packet);<span class="comment">//阻塞接受</span></span><br><span class="line">        System.out.println(packet.toString());</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用UDP通过多线程实现实时聊天</p>
<p><a href="https://www.bilibili.com/video/BV1LJ411z7vY/?p=11" target="_blank" rel="noopener"></a></p>
</blockquote>
<h3 id="URL下载网络资源"><a href="#URL下载网络资源" class="headerlink" title="URL下载网络资源"></a>URL下载网络资源</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200422174054.png" alt=""></p>
<blockquote>
<p>下载网络资源</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> site.tgkw;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line">&gt;<span class="keyword">import</span> java.io.IOException;</span><br><span class="line">&gt;<span class="keyword">import</span> java.io.InputStream;</span><br><span class="line">&gt;<span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line">&gt;<span class="keyword">import</span> java.net.URL;</span><br><span class="line">&gt;<span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       URL url = <span class="keyword">new</span> URL(<span class="string">"http://image.baidu.com/search/detail"</span>);</span><br><span class="line">       HttpURLConnection urlConnection =(HttpURLConnection) url.openConnection();</span><br><span class="line">       InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">       FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test1.jpg"</span>);</span><br><span class="line">       <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> len;</span><br><span class="line">       <span class="keyword">while</span> ((len=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">       &#125;</span><br><span class="line">       fos.close();</span><br><span class="line">       inputStream.close();</span><br><span class="line">       urlConnection.disconnect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>反编译方法</title>
    <url>/2020/04/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="本章核心"><a href="#本章核心" class="headerlink" title="本章核心"></a>本章核心</h3><blockquote>
<ul>
<li>线程是独立的执行路径,是cpu运行与调度的单位</li>
<li>在程序运行时,即使没有自己创建线程,后台也有主线程(main线程)与垃圾回收线程(gc线程)</li>
<li>main线程是程序的入口,一个程序下只能存在一个main方法,main线程</li>
<li>在一个进程中,如果开辟了多个线程,线程的运行由调度器安排调度,调度器与操作系统相关</li>
<li>对同一份资源操作时会存在资源抢夺问题,需要加入并发控制</li>
<li>线程会带来额外的开销,如cpu调度时间,并发控制开销</li>
</ul>
</blockquote>
<h3 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426085830.png" alt=""></p>
<blockquote>
<p>1.Thread</p>
<blockquote>
<ul>
<li>自定义线程继承threa类</li>
<li>重写run()方法,编写线程执行体</li>
<li>创建线程对象,调用start方法</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">        thread1.start();</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的梦想"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>Runnable </p>
<blockquote>
<ul>
<li>定义MyRunnable类实现Runnable接口</li>
<li>实现run()方法,编写线程执行体</li>
<li>new一个MyRunnable对象</li>
<li>new一个Thread对象作为MyRunnable代理</li>
<li>调用start()方法启动线程</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable1 runnable1 = <span class="keyword">new</span> Runnable1();<span class="comment">//创建兑现实现Runnable1类</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable1);<span class="comment">//创建代理类对象,Thread实现了Runnable接口</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;<span class="comment">//创建类实现Runnable接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一只菜鸡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Runnable线程实现过程中运行了代理模式思想.</strong></p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>继承Thread类</p>
<blockquote>
<ul>
<li>子类继承Thread类具备多线程能力</li>
<li>启动线程:子类对象. start()</li>
<li>不建议使用:避免0OP单继承局限性</li>
</ul>
</blockquote>
<p>实现Runnable接口</p>
<blockquote>
<ul>
<li>实现接口Runnable具有多线程能力</li>
<li>启动线程:传入目标对象+ Thread对象.start()</li>
<li>推荐使用:避免单继承局限性，灵活方便，方便同-一个对象被多个线程使用</li>
</ul>
<blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426095428.png" alt=""></p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426101042.png" alt=""></p>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p><img src="C:%5CUsers%5Cyounge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200426101252073.png" alt="image-20200426101252073"></p>
<blockquote>
<p>总结</p>
<blockquote>
<p>真实对象与代理对象都要实现同一接口</p>
<p>代理对象要代理真实对象</p>
</blockquote>
<p>好处</p>
<blockquote>
<p>代理对象可以做许多真实对象无法做的事情</p>
<p>真实对象专注于做自己的事情</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaiLiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        You you=<span class="keyword">new</span> You(<span class="string">"younge"</span>);</span><br><span class="line">        WeddingCompany weddingCompany=<span class="keyword">new</span> WeddingCompany(you);</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first();</span><br><span class="line">        target.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"祝福你们"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h3><blockquote>
<ul>
<li><p>λ希腊字母表中排序第十位的字母，英语名称为.ambda</p>
</li>
<li><p>避免匿名内部类定义过多</p>
</li>
<li><p>其实质属于函数式编程的概念</p>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426111944.png" alt=""></p>
</li>
</ul>
</blockquote>
<blockquote>
<p>Functional Interface</p>
<blockquote>
<p>理解Functional Interface ( 函数式接口)是学习Java8 lambda表达式的关键所在。</p>
<p>函数式接口的定义</p>
<blockquote>
<ul>
<li>任何接口，如果只包含唯一个抽象方法，那么它就是一个函数式接口。</li>
<li>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426113628.png" alt=""></p>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426113406.png" alt="">)<img src="https://gitee.com/yj196/markdown/raw/master/20200426113027.png" alt=""></p>
</blockquote>
</blockquote>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426114423.png" alt=""></p>
</blockquote>
<blockquote>
<p>从操作系统来看</p>
<blockquote>
<ul>
<li>创建状态既是从硬盘读取数据到程序</li>
<li>就绪状态既是为线程配置pcb(运行环境)</li>
<li>阻塞状态既是撤去配置的pcb但仍将关于线程的程序留在内存中</li>
<li>运行状态既是cpu从内存中读取线程相关程序进行运算处理</li>
<li>死亡状态既是将程序从内存中释放</li>
</ul>
</blockquote>
<p>从java来看</p>
<blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426115134.png" alt=""></p>
</blockquote>
</blockquote>
<h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426140120.png" alt=""></p>
</blockquote>
<h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426140310.png" alt=""></p>
</blockquote>
<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426140438.png" alt=""></p>
</blockquote>
<h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><blockquote>
<ul>
<li>礼让线程,让当前执行的线程暂停,但不阻塞</li>
<li>将线程从运行状态转为就绪状态</li>
<li>让cpu重新调度</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Yield1 yield1 = <span class="keyword">new</span> Yield1();</span><br><span class="line">        <span class="keyword">new</span> Thread(yield1,<span class="string">"a"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(yield1,<span class="string">"b"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(yield1,<span class="string">"c"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yield1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程开始执行"</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程结束执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote>
<ul>
<li>join合并线程,待此线程执行完成后,再执行其他线程,其他线程阻塞</li>
<li>可以想象为插队</li>
</ul>
</blockquote>
<blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426143109.png" alt=""></p>
</blockquote>
<h3 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h3><blockquote>
<p>Thread.State</p>
<blockquote>
<p>NEW :线程还没有被启动</p>
<p>RUNNABLE:线程正在执行</p>
<p>BLOCKED:线程处于阻塞态</p>
<p>WAITING:线程正在等待其他线程执行结束</p>
<p>TIMED_WAITING:正在等待另一个线程执行动作达到指定等待时间</p>
<p>TERMINATED:已退出的线程</p>
</blockquote>
</blockquote>
<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426144458.png" alt=""></p>
</blockquote>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote>
<ul>
<li>线程分为用户线程与守护线程</li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不必等待守护线程执行完毕</li>
<li>比如gc线程</li>
</ul>
</blockquote>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><blockquote>
<p>并发:同一个对象被多个对象操作,比如抢票</p>
<p>线程同步: </p>
<blockquote>
<p>​        处理多线程问题时,多个线程访问同一个对象,并且某些线程还想修改这个对象.这时候我们就需要线程同步. 线程同步其实就是一种等待机制 ,多个需要同时访问此对象的线程进入这个对象的等待池形成队列,等待前面线程使用完毕，下一一个线程再使用.</p>
</blockquote>
<p>同步条件:队列+锁</p>
</blockquote>
<blockquote>
<p>由于同一进程的多个线程共享同一块存储空间,在带来方便的同时,也带来了访问冲突问题,为了保证数据在方法中被访问时的正确性,在访问时加入锁机制synchronized ,当一个线程获得对象的排它锁,独占资源,其他线程必须等待，使用后释放锁即可.存在以下问题:</p>
<blockquote>
<ul>
<li>一个线程持有锁会导致其他所有需要此锁的线程挂起;</li>
<li>在多线程竞争下,加锁,释放锁会导致比较多的上下文切换和调度延时，引起性能问题;</li>
<li>如果一个优先级高的线程等待一个优先级低的线程释放锁 会导致优先级倒置,引起性能问题.</li>
</ul>
</blockquote>
</blockquote>
<h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426151059.png" alt=""></p>
</blockquote>
<blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426151251.png" alt=""></p>
</blockquote>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><blockquote>
<ul>
<li>多个线程各自占有一-些共享资源 ,并且互相等待其他线程占有的资源才能运行, 而导致两个或者多个线程都在等待对方释放资源,都停止执行的情形.某一个同步块同时拥有“两个以上对象的锁”时,就可能会发生“死锁”的问题.</li>
<li>死锁产生原因</li>
</ul>
<blockquote>
<ol>
<li>互斥条件: 一个资源每次只能被一个进程使用。</li>
<li>请求与保持条件: 一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件:进程已获得的资源，在未使用完之前，不能强行剥夺。</li>
<li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>
</blockquote>
</blockquote>
<h3 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h3><blockquote>
<ul>
<li>从JDK 5.0开始, Java提供 了更强大的线程同步机制一通过显式定义 同步锁对象来实现同步。同步锁使用L ock对象充当</li>
<li>java.til.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对L ock对象加锁，线程开始访问共享资源之前应先获得L ock对象</li>
<li>ReentrantLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock,可以显式加锁、释放锁。</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/yj196/markdown/raw/master/20200426152151.png" alt=""></p>
<h3 id="synchronized与lock的对比"><a href="#synchronized与lock的对比" class="headerlink" title="synchronized与lock的对比"></a>synchronized与lock的对比</h3><blockquote>
<ul>
<li>Lock是显式锁(手动开启和关闭锁，别忘记关闭锁) synchronized是隐式锁, 出了作用域自动释放</li>
<li>Lock只有代码块锁synchronized有代码块锁和方法锁</li>
<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性(提供更多的子类)</li>
<li>优先使用顺序: .Lock &gt;同步代码块(已经进入了方法体，分配了相应资源) &gt;同步方法(在方法体之外)</li>
</ul>
</blockquote>
<h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426153221.png" alt=""></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型</title>
    <url>/2020/04/25/%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<a id="more"></a>]]></content>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
</search>
