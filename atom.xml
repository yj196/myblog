<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yj196.github.io/"/>
  <updated>2020-07-06T06:45:37.973Z</updated>
  <id>https://yj196.github.io/</id>
  
  <author>
    <name>younge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode</title>
    <link href="https://yj196.github.io/2020/07/06/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>https://yj196.github.io/2020/07/06/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2020-07-06T06:45:37.457Z</published>
    <updated>2020-07-06T06:45:37.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口:"></a>滑动窗口:</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;滑动窗口&quot;&gt;&lt;a href=&quot;#滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口:&quot;&gt;&lt;/a&gt;滑动窗口:&lt;/h3&gt;
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://yj196.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>docker学习</title>
    <link href="https://yj196.github.io/2020/07/05/docker%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <id>https://yj196.github.io/2020/07/05/docker%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</id>
    <published>2020-07-05T15:17:14.457Z</published>
    <updated>2020-07-13T14:40:30.635Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇认真而又严肃的docker学习笔记</p><a id="more"></a><h1 id="docker概述"><a href="#docker概述" class="headerlink" title="docker概述"></a>docker概述</h1><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的<a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口</p></blockquote><h2 id="docker组成"><a href="#docker组成" class="headerlink" title="docker组成"></a>docker组成</h2><blockquote><blockquote><ol><li>Docker Client客户端</li><li>Docker Daemon守护进程(daemon[‘dimən]本身就是守护进程的意思)</li><li>Docker Images镜像</li><li>Docker Container容器</li></ol></blockquote></blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/zUfQre.png" alt=""></p><h2 id="容器与虚拟机区别"><a href="#容器与虚拟机区别" class="headerlink" title="容器与虚拟机区别"></a>容器与虚拟机区别</h2><blockquote><p><a href="https://www.cnblogs.com/rkit/p/9237696.html" target="_blank" rel="noopener">docker与虚拟机区别介绍</a></p></blockquote><blockquote><p><strong>个人理解</strong></p><blockquote><ol><li>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</li><li>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</li></ol></blockquote></blockquote><blockquote><p><strong>docker与虚拟机的对比图</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706163920.png" alt=""></p></blockquote><table><thead><tr><th>对比</th><th>docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动时间</td><td>迅速</td><td>较慢</td></tr><tr><td>大小</td><td>轻量级</td><td>较大</td></tr><tr><td>性能</td><td>共享宿主机内核，系统级虚拟化，占用资源少，性能基本接近物理机</td><td>需要Hypervisor层支持，虚拟化一些设备，降低性能，没有容器性能好。</td></tr><tr><td>安全性</td><td>共享内核,进程级隔离,不如虚拟机</td><td>安全性更好</td></tr></tbody></table><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><h2 id="docker架构图"><a href="#docker架构图" class="headerlink" title="docker架构图"></a>docker架构图</h2><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706165141.png" alt=""></p></blockquote><h2 id="仓库-镜像-容器-repository-images-container"><a href="#仓库-镜像-容器-repository-images-container" class="headerlink" title="仓库,镜像,容器(repository,images,container)"></a>仓库,镜像,容器(repository,images,container)</h2><blockquote><ul><li>仓库(repository)</li></ul><blockquote><ul><li>仓库(Repository)是集中存放镜像文件的场所。</li><li>仓库(Repository)和仓库注册服务器(Registry) 是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签(tag) 。</li><li>仓库分为公开仓库(Public) 和私有仓库(Private) 两种形式。</li><li>最大的公开仓库是Docker Hub，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等</li></ul></blockquote><ul><li>镜像(images)</li></ul><blockquote><ul><li>Docker镜像(Image) 就是一一个只读的模板。镜像可以用来创建Docker 容器，一个镜像可以创建很多容器。就好似 Java中的类和对象，类就是镜像，容器就是对象!</li></ul></blockquote><ul><li>容器(container)</li></ul><blockquote><ul><li>Docker利用容器(Container) 独立运行的一个或一组应用。容器是用镜像创建的运行实例。</li><li>它可以被启动、开始、停止、删除。每个容器都是相互隔离的，保证安全的平台。</li><li>可以把容器看做是一个简易版的Linux环境(包括root用户权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。</li><li>容器的定义和镜像几乎- -模一样，也是一堆层的统一视角， 唯- -区别在 于容器的最上面那一层是可读可写的。</li></ul><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706171019.png" alt=""></p></blockquote></blockquote><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><blockquote><ol><li>官方参考手册:<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></li><li>如果使用的操作系统为Centos系统,则应该确保为Centos7及其以上版本(查看操作系统版本信息: cat/etc/os-release)</li><li>安装gcc相关环境</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++    </span><br></pre></td></tr></table></figure></blockquote><ol start="4"><li>卸载旧docker版本</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \                  </span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></blockquote><ol start="5"><li>安装需要的软件包</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></blockquote><ol start="6"><li>设置镜像仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置阿里的docker镜像仓库</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.po</span><br></pre></td></tr></table></figure><ol start="7"><li>更新yum软件索引</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></blockquote><ol start="8"><li>安装docker CE</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></blockquote><ol start="9"><li>启动docker</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></blockquote><ol start="10"><li>测试命令</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看docker版本</span></span><br><span class="line">docker version </span><br></pre></td></tr></table></figure></blockquote><ol start="11"><li>卸载</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum -y remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></blockquote><ol start="12"><li><a href="https://www.aliyun.com/product/acr" target="_blank" rel="noopener">配置阿里镜像加速</a></li><li>测试docker</li></ol><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="docker-run-的工作流程"><a href="#docker-run-的工作流程" class="headerlink" title="docker run 的工作流程"></a>docker run 的工作流程</h2><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706195058.png" alt=""></p><h1 id="docker-工作原理"><a href="#docker-工作原理" class="headerlink" title="docker 工作原理"></a>docker 工作原理</h1><p>​       <strong>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户 端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器是一个运行时环境，就是我们前面说到的集装箱。</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706195557.png" alt=""></p><h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #显示docker的版本信息</span><br><span class="line">docker info #显示docker系统信息,包括镜像与容器数</span><br><span class="line">docker [info] --help #帮助命令</span><br></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706200225.png" alt=""></p><h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706200305.png" alt=""></p><h3 id="docker-pull-下载镜像-docker-pull-mysql"><a href="#docker-pull-下载镜像-docker-pull-mysql" class="headerlink" title="docker pull(下载镜像:docker pull mysql)"></a>docker pull(下载镜像:docker pull mysql)</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706200502.png" alt=""></p><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706200551.png" alt=""></p><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明:有镜像才能创造容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新建容器启动</span></span><br><span class="line">docker run [options] IMAGE [COMMAND][ARG...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用参数说明 </span></span><br><span class="line">--name="Name"               # 给容器指定一个名字 </span><br><span class="line">-d                          # 后台方式运行容器，并返回容器的id！ </span><br><span class="line">-i                          # 以交互模式运行容器，通过和 -t 一起使用 </span><br><span class="line">-t                          # 给容器重新分配一个终端，通常和 -i 一起使用 </span><br><span class="line">-P                          # 随机端口映射（大写） </span><br><span class="line">-p                          # 指定端口映射（小结），一般可以有四种写法 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！ </span></span><br><span class="line">[root@kuangshen ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@dc8f24dd06d0 /]# exit  # 使用 exit 退出容器 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">/bin/bash 一种壳层与命令行界面，是Unix操作系统下传统的用户和计算机的交互界面。普通意义上的shell(bash是shell的一种)就是可以接受用户输入命令的程序。它之所以被称作shell是因为它隐藏了操作系统低层的细节。Unix操作系统下的shell既是用户交互的界面，也是控制系统的脚本语言。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有的运行中的容器</span></span><br><span class="line">docker ps [options]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用参数说明 </span></span><br><span class="line">-a      # 列出当前所有正在运行的容器 + 历史运行过的容器 </span><br><span class="line">-l      # 显示近创建的容器 </span><br><span class="line">-n=?    # 显示近n个创建的容器 </span><br><span class="line">-q      # 静默模式，只显示容器编号。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">退出容器</span></span><br><span class="line">exit      #容器停止退出</span><br><span class="line">ctrl+p+q  #容器不停止退出</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动停止容器</span></span><br><span class="line">docker start (容器id or 容器名)        # 启动容器 </span><br><span class="line">docker restart (容器id or 容器名)      # 重启容器 </span><br><span class="line">docker stop (容器id or 容器名)         # 停止容器 </span><br><span class="line">docker kill (容器id or 容器名)         # 强制停止容器</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除容器</span></span><br><span class="line">docker rm 容器id                  # 删除指定容器 </span><br><span class="line">docker rm -f $(docker ps -a -q)  # 删除所有容器 </span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令shell"><a href="#常用其他命令shell" class="headerlink" title="常用其他命令shell"></a>常用其他命令shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">后台启动容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 </span></span><br><span class="line">docker run -d 容器名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子</span></span><br><span class="line">docker run -d centos # 启动centos，使用后台方式启动</span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题： 使用docker ps 查看，发现容器已经退出了！ </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令，就会自动退出。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自杀，因为他觉得没有程序了，所以好的情况是，将你的应用使用前台进程的方式运行启动</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 </span></span><br><span class="line">docker logs -f -t --tail 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子：我们启动 centos，并编写一段脚本来测试玩玩！后查看日志</span></span><br><span class="line">[root@kuangshen ~]# docker run -d centos /bin/sh -c "while true;do echo kuangshen;sleep 1;done"</span><br><span class="line">[root@kuangshen ~]# docker ps </span><br><span class="line">CONTAINER ID        IMAGE   </span><br><span class="line">c8530dbbe3b4        centos</span><br><span class="line"><span class="meta">#</span><span class="bash"> -t 显示时间戳   </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 打印新的日志 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --tail 数字  显示多少条！ </span></span><br><span class="line">[root@kuangshen ~]# docker logs -tf --tail 10 c8530dbbe3b4 </span><br><span class="line"></span><br><span class="line">2020-05-11T08:46:40.656901941Z kuangshen </span><br><span class="line">2020-05-11T08:46:41.658765018Z kuangshen </span><br><span class="line">2020-05-11T08:46:42.661015375Z kuangshen </span><br><span class="line">2020-05-11T08:46:43.662865628Z kuangshen </span><br><span class="line">2020-05-11T08:46:44.664571547Z kuangshen </span><br><span class="line">2020-05-11T08:46:45.666718583Z kuangshen </span><br><span class="line">2020-05-11T08:46:46.668556725Z kuangshen </span><br><span class="line">2020-05-11T08:46:47.670424699Z kuangshen </span><br><span class="line">2020-05-11T08:46:48.672324512Z kuangshen </span><br><span class="line">2020-05-11T08:46:49.674092766Z kuangshen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器中运行的进程信息，支持 ps 命令参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 </span></span><br><span class="line">docker top 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试 [root@kuangshen ~]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker top c8530dbbe3b4 </span></span><br><span class="line">UID     PID     PPID    C     STIME     TTY   TIME        CMD </span><br><span class="line">root    27437   27421   0     16:43    ?      00:00:00    /bin/sh -c ....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器/镜像的元数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 </span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试 [root@kuangshen ~]<span class="comment"># docker inspect c8530dbbe3b4</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入正在运行的容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1 </span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line">[root@kuangshen ~]# docker exec -it c8530dbbe3b4 /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2 </span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试2 </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it c8530dbbe3b4 /bin/bash </span><br><span class="line"><span class="meta">#</span><span class="bash"> 区别 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span>   是在容器中打开新的终端，并且可以启动新的进程 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> attach 直接进入容器启动命令的终端，不会启动新的进程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从容器内拷贝文件到主机上</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 </span></span><br><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line">[root@kuangshen ~]# docker cp c8530dbbe3b4:/home/f1 /home</span><br></pre></td></tr></table></figure><h1 id="常用命令表"><a href="#常用命令表" class="headerlink" title="常用命令表"></a>常用命令表</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">attach    Attach to a running container                                         # 当前 shell 下 attach 连接指定运行镜像 </span><br><span class="line">build     Build an image from a Dockerfile                                      # 通过 Dockerfile 定制镜像 </span><br><span class="line">commit    Create a new image from a container changes                           # 提交当前容器为新的镜像 </span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path    #从容器中拷贝指定文件或者目录到宿主机中 </span><br><span class="line">create    Create a new container                                                # 创建一个新的容器，同 run，但不启动容器 </span><br><span class="line">diff      Inspect changes on a container's filesystem                           # 查看 docker容器变化 </span><br><span class="line">events    Get real time events from the server                                  # 从docker服务获取容器实时事件 </span><br><span class="line">exec      Run a command in an existeing container                               # 在已存在的容器上运行命令 </span><br><span class="line">export    Stream the contents of a container as a tar archive                   # 导出容器的内 容流作为一个tar归档文件[对应import ] </span><br><span class="line">history   Show the history of an image                                          # 展示一个镜像形成历史 </span><br><span class="line">images    List images                                                           # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball          # 从 tar包中的内容创建一个新的文件系统映像[对应export] </span><br><span class="line">info      Display system-wide information                                       # 显示系统相关信息 </span><br><span class="line">inspect   Return low-level information on a container                           # 查看容器详细信息 kill      </span><br><span class="line">Kill a running container                                                        # kill 指定 docker 容 器 </span><br><span class="line">load      Load an image from a tar archive                                      # 从一个 tar 包中加载一 个镜像[对应 save] </span><br><span class="line">login     Register or Login to the docker registry server                       # 注册或者登陆一个 docker 源服务器 </span><br><span class="line">logout    Log out from a Docker registry server                                 # 从当前 Docker registry 退出 </span><br><span class="line">logs      Fetch the logs of a container                                         # 输出当前容器日志信息 </span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT         # 查看映射端口对应的容器内部源端口 </span><br><span class="line">pause     Pause all processes within a container                                # 暂停容器 </span><br><span class="line">ps        List containers                                                       # 列出容器列表 </span><br><span class="line">pull      Pull an image or a repository from the docker registry server         # 从docker镜像源服务器拉取指定镜像或者库镜像 </span><br><span class="line">push      Push an image or a repository to the docker registry server           # 推送指定镜像或者库镜像至docker源服务器 </span><br><span class="line">restart   Restart a running container                                           # 重启运行的容器 </span><br><span class="line">rm        Remove one or more containers                                         # 移除一个或者多个容器 </span><br><span class="line">rmi       Remove one or more images                    # 移除一个或多个镜像[无容器使用该 镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] </span><br><span class="line">run       Run a command in a new container                                      # 创建一个新的容器并运行 一个命令 </span><br><span class="line">save      Save an image to a tar archive                                        # 保存一个镜像为一个 tar 包[对应 load] </span><br><span class="line">search    Search for an image on the Docker Hub                                 # 在 docker hub 中搜 索镜像 </span><br><span class="line">start     Start a stopped containers                                            # 启动容器 </span><br><span class="line">stop      Stop a running containers                                             # 停止容器 </span><br><span class="line">tag       Tag an image into a repository                                        # 给源中镜像打标签 </span><br><span class="line">top       Lookup the running processes of a container                           # 查看容器中运行的进程信 息 </span><br><span class="line">unpause   Unpause a paused container                                            # 取消暂停容器 </span><br><span class="line">version   Show the docker version information                                   # 查看 docker 版本号 </span><br><span class="line">wait      Block until a container stops, then print its exit code               # 截取容 器停止时的退出状态值</span><br></pre></td></tr></table></figure><h1 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h1><h2 id="1-镜像是什么"><a href="#1-镜像是什么" class="headerlink" title="1. 镜像是什么"></a>1. 镜像是什么</h2><p>​       <strong>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含 运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件</strong></p><h2 id="2-镜像加载原理"><a href="#2-镜像加载原理" class="headerlink" title="2. 镜像加载原理"></a>2. 镜像加载原理</h2><blockquote><p><strong>UnionFS （联合文件系统）</strong></p></blockquote><p><strong>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统， 它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系 统下(unite several directories into a single virtual ﬁlesystem)。Union 文件系统是 Docker 镜像的基 础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</strong><br><strong>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件 系统叠加起来，这样终的文件系统会包含所有底层的文件和目录</strong></p><blockquote><p><strong>Docker镜像加载原理</strong></p></blockquote><p>*<em>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。 *</em></p><p><strong>bootfs(boot ﬁle system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的底层是bootfs。这一层与我们典型的Linux/Unix系统是 一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</strong></p><p> <strong>rootfs (root ﬁle system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标 准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706212030.png" alt=""></p><h2 id="3-分层理解"><a href="#3-分层理解" class="headerlink" title="3.分层理解"></a>3.分层理解</h2><blockquote><p><strong>分层的镜像</strong> </p></blockquote><p><strong>思考：为什么Docker镜像要采用这种分层的结构呢？</strong></p><p> <strong>好初是资源共享,比如有多个镜像都从相同的Base镜像构建而来，那么宿主机 只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服 务了，而且镜像的每一层都可以被共享。</strong></p><blockquote><p><strong>理解</strong></p></blockquote><p><strong>所有的 Docker 镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</strong><br><strong>举一个简单的例子，假如基于 Ubuntu Linux 16.04 创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</strong><br><strong>该镜像当前已经包含 3 个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706213012.png" alt=""></p><p><strong>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了 一个简单的例子，每个镜像层包含 3 个文件，而镜像包含了来自两个镜像层的 6 个文件。</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706213114.png" alt=""></p><p><strong>上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。</strong><br><strong>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有 6 个文件，这是因为上层中的文件 7 是文件 5 的一个更新版本。</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706213331.png" alt=""></p><p><strong>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新 镜像层添加到镜像当中。</strong></p><p><strong>Docker 通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统 一的文件系统。</strong></p><p><strong>Linux 上可用的存储引擎有 AUFS、Overlay2、Device Mapper、Btrfs 以及 ZFS。顾名思义，每种存储 引擎都基于 Linux 中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。</strong></p><p><strong>Docker 在 Windows 上仅支持 windowsﬁlter 一种存储引擎，该引擎基于 NTFS 文件系统之上实现了分层和 CoW。</strong></p><p><strong>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200706213547.png" alt=""></p><h2 id="4-特点"><a href="#4-特点" class="headerlink" title="4.特点"></a>4.特点</h2><p><strong>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！</strong><br><strong>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</strong></p><h2 id="5-镜像Commit"><a href="#5-镜像Commit" class="headerlink" title="5.镜像Commit"></a>5.镜像Commit</h2><blockquote><p><strong>docker commit 从容器创建一个新的镜像。</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器副本使之成为一个新的镜像！</span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法 </span></span><br><span class="line">docker commit -m="提交的描述信息" -a="作者" 容器id 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure><blockquote><p><strong>测试</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、从Docker Hub 下载tomcat镜像到本地并运行  -it 交互终端 -p 端口映射 </span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：坑爹：docker启动官方tomcat镜像的容器，发现404是因为使用了加速器，而加速器里的 tomcat的webapps下没有root等文件！ </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载tomcat官方镜像，就是这个镜像（阿里云里的tomcat的webapps下没有任何文件） </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入tomcat查看<span class="built_in">cd</span>到webapps下发现全部空的，反而有个webapps.dist里有对应文件，cp -r 到webapps下！ </span></span><br><span class="line">[root@aba865b53114:/usr/local/tomcat]# cp -r webapps.dist/* webapps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、删除上一步镜像产生的tomcat容器的文档 </span></span><br><span class="line">docker ps        # 查看容器id </span><br><span class="line">docker exec -it 容器id /bin/bash </span><br><span class="line">[/usr/local/tomcat] # cd webapps/ </span><br><span class="line">[/usr/local/tomcat/webapps] # ls -l  # 查看是否存在 docs文件夹 </span><br><span class="line">[/usr/local/tomcat/webapps] # curl localhost:8080/docs/   # 可以看到 docs 返回的内容 </span><br><span class="line">[/usr/local/tomcat/webapps] # rm -rf docs # 删除它 </span><br><span class="line">[/usr/local/tomcat/webapps] # curl localhost:8080/docs/   # 再次访问返回404</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、当前运行的tomcat实例就是一个没有docs的容器，我们使用它为模板commit一个没有docs的 tomcat新镜像， tomcat02</span></span><br><span class="line">docker ps -l  # 查看容器的id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：commit的时候，容器的名字不能有大写，否则报错：invalid reference format </span></span><br><span class="line">docker commit -a="kuangshen" -m="no tomcat docs" 1e98a2f815b0 tomcat02:1.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果你想要保存你当前的状态，可以通过commit，来提交镜像，方便使用，类似于 VM 中的快照！</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-a =author作者 -m =massage描述信息</span></span><br></pre></td></tr></table></figure><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="1-什么是容器数据卷"><a href="#1-什么是容器数据卷" class="headerlink" title="1. 什么是容器数据卷"></a>1. 什么是容器数据卷</h2><blockquote><p><strong>容器数据卷理念</strong></p></blockquote><p>​        <strong>将应用和运行的环境打包形成容器运行，运行可以伴随着容器，但是我们对于数据的要求，是希望能够持久化的！就好比，你安装一个MySQL，结果你把容器删了，就相当于删库跑路了.</strong></p><p>​        <strong>所以我们希望容器之间有可能可以共享数据，Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了！这样是行 不通的！</strong></p><p>​        <strong>为了能保存数据在Docker中我们就可以使用卷！让数据挂载到我们本地！这样数据就不会因为容器删除而丢失了！</strong></p><blockquote><p><strong>作用</strong></p></blockquote><p>​        <strong>卷就是目录或者文件，存在一个或者多个容器中，由docker挂载到容器，但不属于联合文件系统，因此 能够绕过 Union File System ， 提供一些用于持续存储或共享数据的特性：</strong><br>​        <strong>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂 载的数据卷。</strong></p><blockquote><p><strong>特点</strong></p></blockquote><ol><li><p>数据卷可在容器之间共享或重用数据</p></li><li><p>卷中的更改可以直接生效 </p></li><li><p>数据卷中的更改不会包含在镜像的更新中</p></li><li><p>数据卷的生命周期一直持续到没有容器使用它为止</p></li></ol><p>*<em>所以：总结一句话： 就是容器的持久化，以及容器间的继承和数据共享！ *</em></p><h2 id="2-使用容器卷"><a href="#2-使用容器卷" class="headerlink" title="2. 使用容器卷"></a>2. 使用容器卷</h2><blockquote><p><strong>方式一:容器直接使用命令添加</strong></p></blockquote><p><strong>挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker run -it -v 宿主机绝对路径目录:容器内目录 镜像名</span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">[root@kuangshen ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br></pre></td></tr></table></figure><p><strong>测试数据是否成功挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yj196/markdown/raw/master/20200707235049.png" alt=""></p><p><strong>测试容器和宿主机之间数据共享：可以发现，在容器中，创建的会在宿主机中看到！</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200707235227.png" alt=""></p><p><strong>测试容器停止退出后，主机修改数据是否会同步！</strong></p><ol><li>停止容器 </li><li>在宿主机上修改文件，增加些内容 </li><li>启动刚才停止的容器 </li><li>然后查看对应的文件，发现数据依旧同步！ok</li></ol><p><img src="https://gitee.com/yj196/markdown/raw/master/20200707235344.png" alt=""></p><blockquote><p><strong>方式二:通过Docker File 来添加</strong></p></blockquote><p><strong>DockerFile 是用来构建Docker镜像的构建文件，是由一些列命令和参数构成的脚本。</strong></p><p>我们在这里，先体验下，后面我们会详细讲解 DockerFile ！<br><strong>测试：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.、我们在宿主机 /home 目录下新建一个 docker-test-volume文件夹 </span></span><br><span class="line">[root@kuangshen home]# mkdir docker-test-volume</span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明：在编写DockerFile文件中使用 VOLUME 指令来给镜像添加一个或多个数据卷</span></span><br><span class="line">VOLUME["/dataVolumeContainer1","/dataVolumeContainer2","/dataVolumeContainer 3"] </span><br><span class="line"><span class="meta">#</span><span class="bash"> 出于可移植和分享的考虑，我们之前使用的 -v 主机目录:容器目录 这种方式不能够直接在 DockerFile中实现</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有宿主机上都存在这样的特定目录.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、编写DockerFile文件 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">pwd</span>是Print Working Directory的缩写，其功能是显示当前所在工作目录的全路径。主要用在当不确定当前所在位置时，通过<span class="built_in">pwd</span>来查看当前目录的绝对路径。</span></span><br><span class="line">[root@kuangshen docker-test-volume]# pwd </span><br><span class="line">/home/docker-test-volume </span><br><span class="line">[root@kuangshen docker-test-volume]# vim dockerfile1</span><br><span class="line">[root@kuangshen docker-test-volume]# cat dockerfile1 </span><br><span class="line"><span class="meta">#</span><span class="bash"> volume <span class="built_in">test</span> FROM centos </span></span><br><span class="line">VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]</span><br><span class="line">CMD echo "-------end------"</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、build后生成镜像，获得一个新镜像 kuangshen/centos</span></span><br><span class="line">docker build -f /home/docker-test-volume/dockerfile1 -t kuangshen/centos . # 注意后有个.</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5Cyounge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200708224547197.png" alt="image-20200708224547197"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">4.启动容器</span></span><br><span class="line">[root@kuangshen docker-test-volume]# docker run -it 0e97e1891a3d /bin/bash # 启动容器</span><br><span class="line"></span><br><span class="line">[root@f5824970eefc /]# ls -l</span><br><span class="line">total 56 </span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr/bin </span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11 11:55 dataVolumeContainer1   # 数据卷目录 </span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11 11:55 dataVolumeContainer2   # 数据卷目录 </span><br><span class="line">drwxr-xr-x   5 root root  360 May 11 11:55 dev </span><br><span class="line">drwxr-xr-x   1 root root 4096 May 11 11:55 etc </span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11  2019 home </span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题:通过上述步骤，容器内的卷目录地址就已经知道了，但是对应的主机目录地址在哪里呢？</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、我们在数据卷中新建一个文件 </span></span><br><span class="line">[root@f5824970eefc dataVolumeContainer1]# pwd </span><br><span class="line">/dataVolumeContainer1</span><br><span class="line">[root@f5824970eefc dataVolumeContainer1]# touch container.txt </span><br><span class="line">[root@f5824970eefc dataVolumeContainer1]# ls -l </span><br><span class="line">total 0 </span><br><span class="line">-rw-r--r-- 1 root root 0 May 11 11:58 container.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、查看下这个容器的信息</span></span><br><span class="line">[root@kuangshen ~]# docker inspect 0e97e1891a3d </span><br><span class="line"><span class="meta">#</span><span class="bash">  查看输出的Volumes </span></span><br><span class="line">"Volumes": &#123;</span><br><span class="line"> "/dataVolumeContainer1": &#123;&#125;,</span><br><span class="line"> "/dataVolumeContainer2": &#123;&#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 7、这个卷在主机对应的默认位置 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：如果访问出现了 cannot open directory: Permission denied 解决办法：在挂载目录后多加一个 --privileged=<span class="literal">true</span>参数即可</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yj196/markdown/raw/master/20200708225129.png" alt=""></p><h1 id="匿名与具名挂载"><a href="#匿名与具名挂载" class="headerlink" title="匿名与具名挂载"></a>匿名与具名挂载</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径 </span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护 </span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载 </span></span><br><span class="line">-v 卷名:/容器内路径 </span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看挂载的路径</span></span><br><span class="line">[root@kuangshen ~]# docker volume inspect nginxconfig </span><br><span class="line">[    </span><br><span class="line">     &#123;</span><br><span class="line">     "CreatedAt": "2020-05-13T17:23:00+08:00",</span><br><span class="line">     "Driver": "local",        "Labels": null,</span><br><span class="line">     "Mountpoint": "/var/lib/docker/volumes/nginxconfig/_data",</span><br><span class="line">     "Name": "nginxconfig",</span><br><span class="line">     "Options": null,</span><br><span class="line">     "Scope": "local"</span><br><span class="line">     &#125; </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 怎么判断挂载的是卷名而不是本机目录名？ </span></span><br><span class="line"><span class="meta">#</span><span class="bash">不是/开始就是卷名，是/开始就是目录名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变文件的读写权限 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro: <span class="built_in">readonly</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rw: readwrite</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定容器对我们挂载出来的内容的读写权限 </span></span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><h1 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h1><p><strong>命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为 数据卷容器。</strong><br><strong>我们使用上一步的镜像：kuangshen/centos 为模板，运行容器 docker01，docker02，docker03，他 们都会具有容器卷</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"/dataVolumeContainer1" </span><br><span class="line">"/dataVolumeContainer2"</span><br></pre></td></tr></table></figure><p><strong>我们来测试下，容器间传递共享</strong></p><h2 id="1、先启动一个父容器docker01，然后在dataVolumeContainer2新增文件"><a href="#1、先启动一个父容器docker01，然后在dataVolumeContainer2新增文件" class="headerlink" title="1、先启动一个父容器docker01，然后在dataVolumeContainer2新增文件##"></a>1、先启动一个父容器docker01，然后在dataVolumeContainer2新增文件##</h2><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713193457.png" alt=""></p><p>*<em>退出不停止：ctrl+P+Q *</em></p><h2 id="2-创建docker02，docker03-让他们继承docker01-–volumes-from"><a href="#2-创建docker02，docker03-让他们继承docker01-–volumes-from" class="headerlink" title="2. 创建docker02，docker03 让他们继承docker01  –volumes-from"></a>2. 创建docker02，docker03 让他们继承docker01  –volumes-from</h2><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713193623.png" alt=""></p><h2 id="3-回到docker01发现可以看到-02-和-03-添加的共享文件"><a href="#3-回到docker01发现可以看到-02-和-03-添加的共享文件" class="headerlink" title="3. 回到docker01发现可以看到 02 和 03 添加的共享文件"></a>3. 回到docker01发现可以看到 02 和 03 添加的共享文件</h2><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713194837.png" alt=""></p><h2 id="4-删除docker01，docker02-修改后docker03还能不能访问"><a href="#4-删除docker01，docker02-修改后docker03还能不能访问" class="headerlink" title="4. 删除docker01，docker02 修改后docker03还能不能访问"></a>4. 删除docker01，docker02 修改后docker03还能不能访问</h2><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713194946.png" alt=""></p><h2 id="5-删除docker02-，docker03还能不能访问"><a href="#5-删除docker02-，docker03还能不能访问" class="headerlink" title="5. 删除docker02 ，docker03还能不能访问"></a>5. 删除docker02 ，docker03还能不能访问</h2><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713195036.png" alt=""></p><h2 id="6、新建docker04继承docker03，然后再删除docker03，看下是否可以访问"><a href="#6、新建docker04继承docker03，然后再删除docker03，看下是否可以访问" class="headerlink" title="6、新建docker04继承docker03，然后再删除docker03，看下是否可以访问"></a>6、新建docker04继承docker03，然后再删除docker03，看下是否可以访问</h2><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713195832.png" alt=""></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713195920.png" alt=""></p><p><strong>得出结论：</strong></p><p><strong>容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。</strong></p><p><strong>存储在本机的文件则会一直保留！</strong></p><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><p><strong>大家想想，Nginx，tomcat，mysql 这些镜像都是哪里来的？官方能写，我们不能写吗？ 我们要研究自己如何做一个镜像，而且我们写的微服务项目以及springboot打包上云部署，Docker就是最方便的。</strong></p><p><strong>微服务打包成镜像，任何装了Docker的地方，都可以下载使用，极其的方便。</strong></p><p><strong>流程：开发应用=&gt;DockerFile=&gt;打包为镜像=&gt;上传到仓库（私有仓库，公有仓库）=&gt; 下载镜像 =&gt; 启动运行。</strong></p><h2 id="什么是dockerfile"><a href="#什么是dockerfile" class="headerlink" title="什么是dockerfile"></a>什么是dockerfile</h2><p><strong>dockerﬁle是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。</strong></p><p><strong>构建步骤：</strong></p><p><strong>1、编写DockerFile文件</strong></p><p><strong>2、docker build 构建镜像</strong></p><p><strong>3、docker run dockerﬁle文件</strong></p><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p><strong>基础知识</strong></p><ol><li><p>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</p></li><li><p>指令按照从上到下，顺序执行</p></li><li><p>#表示注释 </p></li><li><p>每条指令都会创建一个新的镜像层，并对镜像进行提交</p></li></ol><p><strong>流程：</strong></p><p>1、docker从基础镜像运行一个容器 </p><p>2、执行一条指令并对容器做出修改</p><p>3、执行类似 docker commit 的操作提交一个新的镜像层 </p><p>4、Docker再基于刚提交的镜像运行一个新容器 </p><p>5、执行dockerﬁle中的下一条指令直到所有指令都执行完成！</p><p><strong>说明</strong></p><p>从应用软件的角度来看，DockerFile，docker镜像与docker容器分别代表软件的三个不同阶段。</p><ul><li>DockerFile 是软件的原材料      （代码）</li><li>Docker 镜像则是软件的交付品  （.apk）</li><li>Docker 容器则是软件的运行状态  （客户下载安装执行） </li></ul><p>DockerFile 面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可！</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713202520.png" alt=""></p><p>DockerFile：需要定义一个DockerFile，DockerFile定义了进程需要的一切东西。DockerFile涉及的内容 包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进 程和内核进程（当引用进行需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace的权 限控制）等等。</p><p>Docker镜像：在DockerFile 定义了一个文件之后，Docker build 时会产生一个Docker镜像，当运行 Docker 镜像时，会真正开始提供服务； </p><p>Docker容器：容器是直接提供服务的。 </p><h2 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h2><p><strong>关键字：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM         # 基础镜像，当前新镜像是基于哪个镜像的 </span><br><span class="line">MAINTAINER   # 镜像维护者的姓名混合邮箱地址 </span><br><span class="line">RUN          # 容器构建时需要运行的命令 </span><br><span class="line">EXPOSE       # 当前容器对外保留出的端口 </span><br><span class="line">WORKDIR      # 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点 </span><br><span class="line">ENV          # 用来在构建镜像过程中设置环境变量 </span><br><span class="line">ADD          # 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包 </span><br><span class="line">COPY         # 类似ADD，拷贝文件和目录到镜像中！ </span><br><span class="line">VOLUME       # 容器数据卷，用于数据保存和持久化工作 </span><br><span class="line">CMD          # 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有 后一个生效！ </span><br><span class="line">ENTRYPOINT   # 指定一个容器启动时要运行的命令！和CMD一样 </span><br><span class="line">ONBUILD      # 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的 ONBUILD被触发</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713203339.png" alt=""></p><p><img src="C:%5CUsers%5Cyounge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200713203405692.png" alt="image-20200713203405692"></p><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub 中99% 的镜像都是通过在base镜像（Scratch）中安装和配置需要的软件构建出来的</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713203522.png" alt=""></p><blockquote><p><strong>自定义一个centos</strong></p></blockquote><p><strong>1、编写DockerFile</strong> </p><p>查看下官方默认的CentOS的情况：</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713203654.png" alt=""></p><p>目的：使我们自己的镜像具备如下：登陆后的默认路径、vim编辑器、查看网络配置ifconﬁg支持</p><p>准备编写DockerFlie文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen home]# mkdir dockerfile-test </span><br><span class="line">[root@kuangshen home]# ls ceshi  dockerfile-test  docker-test-volume  f1 </span><br><span class="line">[root@kuangshen home]# </span><br><span class="line">[root@kuangshen home]# vim mydockerfile-centos # 编辑文件 </span><br><span class="line">[root@kuangshen home]# cat mydockerfile-centos </span><br><span class="line">FROM centos </span><br><span class="line">MAINTAINER kuangshen&lt;24736743@qq.com&gt;</span><br><span class="line">ENV MYPATH /usr/local </span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">RUN yum -y install vim </span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH </span><br><span class="line">CMD echo "----------end--------" </span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><strong>2、构建</strong><br><strong>docker build -f dockerfile地址 -t 新镜像名字:TAG .</strong><br><strong>会看到 docker build 命令后有一个 .                  . 表示当前目录<strong>****</strong></strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713205012.png" alt=""></p><p><strong>3. 运行</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713204926.png" alt=""></p><p>可以看到，我们自己的新镜像已经支持 vim/ifconﬁg的命令，扩展OK</p><p><strong>4、列出镜像地的变更历史</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713205111.png" alt=""></p><blockquote><p><strong>CMD与ENTRYPOINT的区别</strong></p></blockquote><p>我们之前说过，两个命令都是指定一个容器启动时要运行的命令</p><p>CMD：Dockerﬁle 中可以有多个CMD 指令，但只有后一个生效，CMD 会被 docker run 之后的参数 替换！</p><p>ENTRYPOINT： docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合！</p><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><blockquote><p><strong>阿里云镜像发布</strong></p></blockquote><p>1、登录阿里云</p><p>2、找到容器镜像服务</p><p>3、创建命名空间</p><p>4、创建镜像仓库</p><p>5、点击进入这个镜像仓库，可以看到所有的信息</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713205640.png" alt=""></p><p>6、测试推送发布</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、登录阿里云 </span></span><br><span class="line">[root@kuangshen tomcat]# docker login --username=18225148644 registry.cnbeijing.aliyuncs.com </span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json. </span><br><span class="line">Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、设置 tag </span></span><br><span class="line">docker tag [ImageId] registry.cn-beijing.aliyuncs.com/bilibilikuangshen/kuangshen-test:[镜像版本号] </span><br><span class="line">[root@kuangshen tomcat]# docker tag 251ca4419332 registry.cnbeijing.aliyuncs.com/bilibili-kuangshen/kuangshen-test:v1.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、推送命令 docker push registry.cn-beijing.aliyuncs.com/bilibili-kuangshen/kuangshentest:[镜像版本号]</span></span><br><span class="line">[root@kuangshen tomcat]# docker push registry.cnbeijing.aliyuncs.com/bilibili-kuangshen/kuangshen-test:v1.0</span><br></pre></td></tr></table></figure><p>7、在阿里云镜像仓库查看效果！</p><p><img src="C:%5CUsers%5Cyounge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200713210847403.png" alt="image-20200713210847403"></p><p><strong>总结</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713210924.png" alt=""></p><h1 id="Docker-网络讲解"><a href="#Docker-网络讲解" class="headerlink" title="Docker 网络讲解"></a>Docker 网络讲解</h1><h2 id="理解dcker0"><a href="#理解dcker0" class="headerlink" title="理解dcker0"></a>理解dcker0</h2><p>准备工作：清空所有的容器，清空所有的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)             # 删除所有容器</span><br><span class="line">docker rmi -f $(docker images -qa)          # 删除全部镜像</span><br></pre></td></tr></table></figure><blockquote><p>先做一个测试</p></blockquote><p>查看本地ip <strong>ip addr</strong></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713211537.png" alt=""></p><p>这里我们分析可得，有三个网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lo         127.0.0.1       # 本机回环地址 </span><br><span class="line">eth0       172.17.90.138   # 阿里云的私有IP </span><br><span class="line">docker0    172.18.0.1      # docker网桥 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题：Docker 是如何处理容器网络访问的？</span></span><br></pre></td></tr></table></figure><p>我们之前安装ES的时候，留过一个问题，就是安装Kibana的问题，Kibana得指定ES的地址！或者我们 实际场景中，我们开发了很多微服务项目，那些微服务项目都要连接数据库，需要指定数据库的url地 址，通过ip。但是我们用Docker管理的话，假设数据库出问题了，我们重新启动运行一个，这个时候数 据库的地址就会发生变化，docker会给每个容器都分配一个ip，且容器和容器之间是可以互相访问的。 我们可以测试下容器之间能不能ping通过：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动tomcat01 [root@kuangshen ~]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tomcat01的ip地址，docker会给每个容器都分配一个ip！ </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat01 ip addr </span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    </span><br><span class="line">    inet 127.0.0.1/8 scope host lo       </span><br><span class="line">    valid_lft forever preferred_lft forever </span><br><span class="line">122: eth0@if123: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    </span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0       </span><br><span class="line">    valid_lft forever preferred_lft forever      </span><br><span class="line"><span class="meta">#</span><span class="bash"> 思考，我们的linux服务器是否可以ping通容器内的tomcat  ？ </span></span><br><span class="line">[root@kuangshen ~]# ping 172.18.0.2 PING 172.18.0.2 </span><br><span class="line">(172.18.0.2) 56(84) bytes of data. </span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.070 ms  # 可以ping通！</span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><p>1、每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。这是个桥接网卡，使用了<strong>veth-pair</strong> 技术！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们再次查看主机的 ip addr </span></span><br><span class="line">[root@kuangshen ~]# ip addr </span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    </span><br><span class="line">  link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    </span><br><span class="line">  inet 127.0.0.1/8 scope host lo       </span><br><span class="line">  valid_lft forever preferred_lft forever </span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    </span><br><span class="line">  link/ether 00:16:3e:30:27:f4 brd ff:ff:ff:ff:ff:ff    </span><br><span class="line">  inet 172.17.90.138/20 brd 172.17.95.255 scope global dynamic eth0       </span><br><span class="line">  valid_lft 310954997sec preferred_lft 310954997sec </span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     </span><br><span class="line">  link/ether 02:42:bb:71:07:06 brd ff:ff:ff:ff:ff:ff    </span><br><span class="line">  inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0      </span><br><span class="line">  valid_lft forever preferred_lft forever</span><br><span class="line">123: vethc8584ea@if122: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default    </span><br><span class="line">  link  /et her 0a:4b:bb:40:78:a7 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现：本来我们有三个网络，我们在启动了个tomcat容器之后，多了一个！123的网络！</span></span><br></pre></td></tr></table></figure><p>2、每启动一个容器，linux主机就会多了一个虚拟网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们启动了一个tomcat01，主机的ip地址多了一个   123: vethc8584ea@if122 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后我们在tomcat01容器中查看容器的ip是        122: eth0@if123</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们再启动一个tomcat02观察 </span></span><br><span class="line">[root@kuangshen ~]# docker run -d -P --name tomcat02 tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后发现linux主机上又多了一个网卡   125: veth021eeea@if124: </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们看下tomcat02的容器内ip地址是   124: eth0@if125: </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat02 ip addr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 观察现象： </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat  --- linux主机  vethc8584ea@if122  ---- 容器内 eth0@if123 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat  --- linux主机  veth021eeea@if124  ---- 容器内 eth0@if125 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 相信到了这里，大家应该能看出点小猫腻了吧！只要启动一个容器，就有一对网卡</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> veth-pair 就是一对的虚拟设备接口，它都是成对出现的。一端连着协议栈，一端彼此相连着。 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正因为有这个特性，它常常充当着一个桥梁，连接着各种虚拟网络设备! </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> “Bridge、OVS 之间的连接”，“Docker 容器之间的连接” 等等，以此构建出非常复杂的虚拟网络 结构，比如 OpenStack Neutron。</span></span><br></pre></td></tr></table></figure><p>3、我们来测试下tomcat01和tomcat02容器间是否可以互相ping通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]# docker exec -it tomcat02 </span><br><span class="line">ping 172.18.0.2 PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data. </span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.110 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结论：容器和容器之间是可以互相访问的。</span></span><br></pre></td></tr></table></figure><p>4、我们来画一个网络模型图</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713213218.png" alt=""></p><p>结论：tomcat1和tomcat2共用一个路由器。是的，他们使用的一个，就是docker0。任何一个容器启动 默认都是docker0网络。 </p><p>docker默认会给容器分配一个可用ip</p><blockquote><p>小结</p></blockquote><p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据 Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网 关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接 通信。</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713213457.png" alt=""></p><p>Docker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并 让他们彼此联通（这样一对接口叫veth pair）；</p><p>Docker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中 进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容 器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。</p><h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><p>思考一个场景，我们编写一个微服务，数据库连接地址原来是使用ip的，如果ip变化就不行了，那我们 能不能使用服务名访问呢？</p><p>jdbc:mysql://mysql:3306，这样的话哪怕mysql重启，我们也不需要修改配置了！docker提供了 –link 的操作！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们使用tomcat02，直接通过容器名ping tomcat01，不使用ip </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat02 </span><br><span class="line">ping tomcat01 ping: tomcat01: Name or service not known  # 发现ping不通</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们再启动一个tomcat03，但是启动的时候连接tomcat02</span></span><br><span class="line">[root@kuangshen ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat a3a4a17a2b707766ad4f2bb967ce1d94f658cd4cccef3bb8707395cdc71fa1e7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个时候，我们就可以使用tomcat03 ping通tomcat02 了 </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat03 ping tomcat02 PING tomcat02 (172.18.0.3) 56(84) bytes of data. 64 bytes from tomcat02 (172.18.0.3): icmp_seq=1 ttl=64 time=0.093 ms 64 bytes from tomcat02 (172.18.0.3): icmp_seq=2 ttl=64 time=0.066 ms</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再来测试，tomcat03 是否可以ping tomcat01    失败 </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat03 ping tomcat01 ping: tomcat01: Name or service not known</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再来测试，tomcat02 是否可以ping tomcat03    反向也ping不通 </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat02 ping tomcat03 ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure><p>思考，这个原理是什么呢？我们进入tomcat03中查看下host配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]# docker exec -it tomcat03 cat /etc/hosts </span><br><span class="line">127.0.0.1   localhost </span><br><span class="line">::1 localhost ip6-localhost ip6-loopback </span><br><span class="line">fe00::0 ip6-localnet </span><br><span class="line">ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes </span><br><span class="line">ff02::2 ip6-allrouters 172.18.0.3  tomcat02 b80da266a3ad  # 发现tomcat2直接被写在这里 </span><br><span class="line">172.18.0.4  a3a4a17a2b70</span><br><span class="line"><span class="meta">#</span><span class="bash"> 所以这里其实就是配置了一个 hosts 地址而已！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原因：--link的时候，直接把需要link的主机的域名和ip直接配置到了hosts文件中了。</span></span><br></pre></td></tr></table></figure><p>–link早都过时了，我们不推荐使用！我们可以使用自定义网络的方式 </p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote><p><strong>基本命令查看</strong></p></blockquote><p>命令如下:</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713214259.png" alt=""></p><p>查看所有网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]# docker network ls </span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE </span><br><span class="line">4eb2182ac4b2        bridge              bridge              local </span><br><span class="line">ae2b6209c2ab        host                host                local </span><br><span class="line">c037f7ec7e57        none                null                local</span><br></pre></td></tr></table></figure><p>所有网路模式</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713214438.png" alt=""></p><p>查看一个具体的网络的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 </span></span><br><span class="line">[root@kuangshen ~]# docker network inspect 4eb2182ac4b2 </span><br><span class="line">[    </span><br><span class="line">   &#123;        </span><br><span class="line">      "Name": "bridge",        </span><br><span class="line">      "Id": </span><br><span class="line">      "4eb2182ac4b23487e1eb6e06df56c71ab6f0adc7ccc0962b4747d0eed5ad6690",        </span><br><span class="line">      "Created": "2020-05-11T15:44:20.131441544+08:00",   </span><br><span class="line">      "Scope": "local",</span><br><span class="line">      "Driver": "bridge",</span><br><span class="line">      "EnableIPv6": false,</span><br><span class="line">      "IPAM": &#123;            </span><br><span class="line">      "Driver": "default",</span><br><span class="line">       "Options": null,</span><br><span class="line">       "Config": [ </span><br><span class="line">                   &#123;                    </span><br><span class="line">                   // 默认docker0是管理这个子网范围内的。0~16，也就是 255*255，去 掉0个255，我们有65534可以分配的ip                   </span><br><span class="line">                   // docker0网络默认可以支持创建6万多个容器ip不重复</span><br><span class="line">                   "Subnet": "172.18.0.0/16",</span><br><span class="line">                   "Gateway": "172.18.0.1"    </span><br><span class="line">                   &#125;            </span><br><span class="line">                     ]        </span><br><span class="line">                      &#125;,        </span><br><span class="line">       "Internal": false,</span><br><span class="line">       "Attachable": false,</span><br><span class="line">       "Ingress": false,</span><br><span class="line">       "ConfigFrom": </span><br><span class="line">             &#123;           </span><br><span class="line">       "Network": ""        </span><br><span class="line">              &#125;, </span><br><span class="line">       "ConfigOnly": false,</span><br></pre></td></tr></table></figure><blockquote><p><strong>自定义网卡</strong></p></blockquote><p>1、删除原来的所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]# docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复到了开始的样子 </span></span><br><span class="line">[root@kuangshen ~]# ip addr </span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    </span><br><span class="line">    inet 127.0.0.1/8 scope host lo      </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    </span><br><span class="line">    link/ether 00:16:3e:30:27:f4 brd ff:ff:ff:ff:ff:ff    </span><br><span class="line">    inet 172.17.90.138/20 brd 172.17.95.255 scope global dynamic eth0       </span><br><span class="line">    valid_lft 310951436sec preferred_lft 310951436sec </span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default     </span><br><span class="line">    link/ether 02:42:bb:71:07:06 brd ff:ff:ff:ff:ff:ff   </span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0       </span><br><span class="line">    valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>2、接下来我们来创建容器，但是我们知道默认创建的容器都是docker0网卡的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认我们不配置网络，也就相当于默认值 --net bridge  使用的docker0 </span></span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0网络的特点    </span></span><br><span class="line">1.它是默认的    </span><br><span class="line">2.域名访问不通    </span><br><span class="line">3.--link 域名通了，但是删了又不行</span><br></pre></td></tr></table></figure><p>3、我们可以让容器创建的时候使用自定义网络</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713215325.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自定义创建的默认default <span class="string">"bridge"</span> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义创建一个网络网络 </span></span><br><span class="line">[root@kuangshen ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet 09bd09d8d3a6b33e6d19f49643dab551e5a45818baf4d5328aa7320c6dcfc236</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确认下 </span></span><br><span class="line">[root@kuangshen ~]# docker network ls </span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE </span><br><span class="line">4eb2182ac4b2        bridge              bridge              local </span><br><span class="line">ae2b6209c2ab        host                host                local </span><br><span class="line">09bd09d8d3a6        mynet               bridge              local </span><br><span class="line">c037f7ec7e57        none                null                local </span><br><span class="line">[root@kuangshen ~]# docker network inspect mynet </span><br><span class="line">[    </span><br><span class="line">  &#123;       </span><br><span class="line">      "Name": "mynet",        </span><br><span class="line">      "Id": "09bd09d8d3a6b33e6d19f49643dab551e5a45818baf4d5328aa7320c6dcfc236",</span><br><span class="line">      "Created": "2020-05-13T13:29:33.568644836+08:00",        </span><br><span class="line">      "Scope": "local",        "Driver": "bridge",        </span><br><span class="line">      "EnableIPv6": false,        "IPAM": &#123;            </span><br><span class="line">      "Driver": "default",            </span><br><span class="line">      "Options": &#123;&#125;,            </span><br><span class="line">      "Config": </span><br><span class="line">      [               </span><br><span class="line">      &#123;                    </span><br><span class="line">      "Subnet": "192.168.0.0/16", </span><br><span class="line">      "Gateway": "192.168.0.1"               </span><br><span class="line">      &#125;            </span><br><span class="line">      ]       </span><br><span class="line">      &#125;,        </span><br><span class="line">      "Internal": false,       </span><br><span class="line">      "Attachable": false,        </span><br><span class="line">      "Ingress": false,        </span><br><span class="line">      "ConfigFrom": &#123;            </span><br><span class="line">      "Network": ""       </span><br><span class="line">      &#125;,        </span><br><span class="line">      "ConfigOnly": false,       </span><br><span class="line">      "Containers": &#123;&#125;,       </span><br><span class="line">      "Options": &#123;&#125;,        </span><br><span class="line">      "Labels": &#123;&#125;   </span><br><span class="line">      &#125; </span><br><span class="line">      ]</span><br></pre></td></tr></table></figure><p>聊了这么多，我们现在应该可以深刻理解docker的网络了</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200713221225.png" alt=""></p><p>docker0和自定义网络肯定不通，我们使用自定义网络的好处就是网络隔离：</p><p>大家公司项目部署的业务都非常多，假设我们有一个商城，我们会有订单业务（操作不同数据），会有 订单业务购物车业务（操作不同缓存）。如果在一个网络下，有的程序猿的恶意代码就不能防止了，所 以我们就在部署的时候网络隔离，创建两个桥接网卡，比如订单业务（里面的数据库，redis，mq，全 部业务    都在order-net网络下）其他业务在其他网络。</p><p>那关键的问题来了，如何让 tomcat-net-01 访问 tomcat1？</p><p><strong>结论：如果要跨网络操作别人，就需要使用 docker network connect [OPTIONS] NETWORK CONTAINER 连接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动默认的容器，在docker0网络下 [root@kuangshen ~]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -P --name tomcat01 tomcat bcd122e0dcf6bf8c861eaa934911f98a5497a4954f3fde9575e496160bd23287 </span></span><br><span class="line">[root@kuangshen ~]# docker run -d -P --name tomcat02 tomcat 6183aaeca003a3e5a3549a37f9c1040551320ae358807b4aaad547a986afb887</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前的容器 [root@kuangshen ~]<span class="comment"># docker ps</span></span></span><br><span class="line">CONTAINER ID        IMAGE                PORTS                     NAMES</span><br><span class="line">6183aaeca003        tomcat               0.0.0.0:32774-&gt;8080/tcp   tomcat02 </span><br><span class="line">bcd122e0dcf6        tomcat               0.0.0.0:32773-&gt;8080/tcp   tomcat01 </span><br><span class="line">2e85d71afe87        tomcat               0.0.0.0:32772-&gt;8080/tcp   tomcatnet-02 </span><br><span class="line">065f82e947c7        tomcat               0.0.0.0:32771-&gt;8080/tcp   tomcatnet-01</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们来查看下network帮助，发现一个命令 connect</span></span><br><span class="line">[root@kuangshen ~]# docker network --help </span><br><span class="line">Commands:  connect     Connect a container to a network # 连接一个容器到一个网络 </span><br><span class="line">create      Create a network  </span><br><span class="line">disconnect  Disconnect a container from a network  </span><br><span class="line">inspect     Display detailed information on one or more networks  </span><br><span class="line">ls          List networks  </span><br><span class="line">prune       Remove all unused networks  </span><br><span class="line">rm          Remove one or more networks</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们来测试一下！打通mynet-docker0 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker network connect [OPTIONS] NETWORK CONTAINER</span></span><br><span class="line">[root@kuangshen ~]# docker network connect mynet tomcat01 </span><br><span class="line">[root@kuangshen ~]# docker network inspect mynet </span><br><span class="line"> [    </span><br><span class="line">  &#123;        </span><br><span class="line">    ......        </span><br><span class="line">    "Containers": &#123;            </span><br><span class="line">       "065f82e947c760c63539ab4c0de0d683787ec7ac6d0dcaa71f64e191319f9fe7": </span><br><span class="line">          &#123;                "Name": "tomcat-net-01",                </span><br><span class="line">                           "EndpointID": "d61cef1bc294d7f10fb6d9b728735fc87bed79e4e02f5298374f0fab3e9b2da6",                                                "MacAddress": "02:42:c0:a8:00:02",                </span><br><span class="line">                           "IPv4Address": "192.168.0.2/16",                </span><br><span class="line">                           "IPv6Address": ""            </span><br><span class="line">                           &#125;,            </span><br><span class="line">        "2e85d71afe87c87166786b0bbae2d90eefb969d716fcd78a21173add5956cb12": </span><br><span class="line">         &#123;                  "Name": "tomcat-net-02",                </span><br><span class="line">                            "EndpointID": "adbc37a20526c2985c3589382998a3d106ef722662c7b296a57d8a7c8f449f38",                                               "MacAddress": "02:42:c0:a8:00:03",               </span><br><span class="line">                            "IPv4Address": "192.168.0.3/16",               </span><br><span class="line">                            "IPv6Address": ""           </span><br><span class="line">                            &#125;,            // 发现我们的tomcat01就进来这里了，tomcat01拥有了双ip                      "bcd122e0dcf6bf8c861eaa934911f98a5497a4954f3fde9575e496160bd23287": </span><br><span class="line">           &#123;                "Name": "tomcat01",                </span><br><span class="line">                            "EndpointID": "b2bf2342948e17048d872a4d5603c77e90d0e032439d510e86c10a1acc3928d9",                                               "MacAddress": "02:42:c0:a8:00:04",               </span><br><span class="line">                            "IPv4Address": "192.168.0.4/16",                </span><br><span class="line">                            "IPv6Address": ""</span><br><span class="line">                                  &#125;        </span><br><span class="line">                                &#125;,       </span><br><span class="line">                   ......    &#125;</span><br><span class="line">                          ]</span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat01 可以ping通了 </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat01 </span><br><span class="line">ping tomcat-net-01 PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data. </span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.071 ms </span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.067 ms </span><br><span class="line"><span class="meta">#</span><span class="bash"> tomcat02 依旧ping不通，大家应该就理解了 </span></span><br><span class="line">[root@kuangshen ~]# docker exec -it tomcat02 ping tomcat-net-01 </span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇认真而又严肃的docker学习笔记&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://yj196.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="https://yj196.github.io/2020/06/28/leetcode/"/>
    <id>https://yj196.github.io/2020/06/28/leetcode/</id>
    <published>2020-06-28T01:00:55.396Z</published>
    <updated>2020-06-28T03:18:13.061Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title:leetcode<br>tag:算法</p><hr><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title:leetcode&lt;br&gt;tag:算法&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;滑动窗口&quot;&gt;&lt;a href=&quot;#滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口&quot;&gt;&lt;/a&gt;滑动窗口&lt;/h3&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>spring注解式标记bean</title>
    <link href="https://yj196.github.io/2020/06/20/sspring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E6%A0%87%E8%AE%B0bean/"/>
    <id>https://yj196.github.io/2020/06/20/sspring%E6%B3%A8%E8%A7%A3%E5%BC%8F%E6%A0%87%E8%AE%B0bean/</id>
    <published>2020-06-20T14:02:17.951Z</published>
    <updated>2020-06-20T14:10:14.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Controller:用于标记controller层下的类,使其成为一个bean</p></blockquote><blockquote><p>@Repository:用于标记Mapper层下的类</p></blockquote><blockquote><p>@Service:用于标记Service层下的类,使其成为一个bean</p></blockquote><blockquote><p>@Component:用于标记其他层的类,使其成为一个bean</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Controller:用于标记controller层下的类,使其成为一个bean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;@Repository:用于标记Mapper层下的类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;bl
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://yj196.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="https://yj196.github.io/2020/05/08/MySQL/"/>
    <id>https://yj196.github.io/2020/05/08/MySQL/</id>
    <published>2020-05-08T02:09:00.348Z</published>
    <updated>2020-05-10T10:46:52.161Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库fruit</span><br><span class="line">CREATE DATABASE &#96;fruit&#96;CHARACTER SET utf8 COLLATE utf8_general_ci; </span><br><span class="line">USE fruit</span><br><span class="line">-- 删除数据库</span><br><span class="line">DROP DATABASE fruit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 创建表(fruit) 使用sQL创建</span><br><span class="line">-- AUTO_INCRENENT自增</span><br><span class="line">-- 字符中使用单引号括起来!</span><br><span class="line">-- 所有的语句后面加，(英文的)。 最后一个不用加</span><br><span class="line">-- PRIMARY KEY主键，一般一个表只有一个唯一的主键!</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#39;fruit&#39; (</span><br><span class="line">&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;编号&#39;，</span><br><span class="line">&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;，</span><br><span class="line">PRIMARY KEY(id)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">-- 表操作</span><br><span class="line">-- 修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</span><br><span class="line">ALTER TABLE apple RENAME AS fruit </span><br><span class="line">-- 修改表的字段(重命名,修改约束)尽量不要修改主键与自增元素</span><br><span class="line">ALTER TABLE fruit CHANGE &#96;year&#96; &#96;years&#96; INT(4)</span><br><span class="line">ALTER TABLE fruit MODIFY &#96;years&#96; VARCHAR</span><br><span class="line">-- 删除表字段</span><br><span class="line">ALTER TABLE fruit DROP &#96;year&#96;</span><br><span class="line">-- 增加表的字段</span><br><span class="line">ALTER TABLE banana ADD &#96;from&#96; VARCHAR(4) NOT NULL COMMENT &#39;产地&#39;</span><br><span class="line">-- 删除表</span><br><span class="line">DROP TABLE IF EXISTS fruit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 数据操作</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO &#96;apple&#96; (&#96;size&#96;,&#96;year&#96;,&#96;name&#96;)VALUE(&#39;1&#39;,&#39;1&#39;,&#39;fushisan&#39;),(&#39;2&#39;,&#39;1&#39;,&#39;西安&#39;),(&#39;1&#39;,&#39;2&#39;,&#39;重庆&#39;)</span><br><span class="line">-- 修改数据</span><br><span class="line">UPDATE &#96;apple&#96; SET &#96;name&#96;&#x3D;&#39;富士&#39;,&#96;year&#96;&#x3D;&#39;2&#39; WHERE id&lt;&#x3D;2</span><br><span class="line">-- 通过多个条件定位修改数据</span><br><span class="line">UPDATE &#96;apple&#96; SET &#96;name&#96;&#x3D;&#39;富士山&#39;,&#96;year&#96;&#x3D;&#39;2&#39; WHERE id&lt;&#x3D;2 AND size&#x3D;1</span><br><span class="line">-- 删除数据</span><br><span class="line">DELETE FROM &#96;apple&#96; WHERE id&#x3D;4</span><br><span class="line">-- 清空数据</span><br><span class="line">TRUNCATE apple</span><br></pre></td></tr></table></figure><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><blockquote><p>指定查询字段</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 老师</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span> <span class="keyword">FROM</span> 学生</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span> <span class="keyword">AS</span> <span class="string">`学生名字`</span> <span class="keyword">FROM</span> 学生 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'姓名:'</span>,<span class="string">`name`</span>) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> 学生</span><br></pre></td></tr></table></figure><blockquote><p>联表查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.name,<span class="string">`project`</span>,s.name,<span class="string">`score`</span> </span><br><span class="line"><span class="keyword">FROM</span> 老师 <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 学生 <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> t.id=s.id</span><br><span class="line"><span class="comment">-- inner join</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yj196/markdown/raw/master/20200508153338.png" alt=""></p><p>left join</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.name,<span class="string">`project`</span>,s.name,<span class="string">`score`</span> </span><br><span class="line"><span class="keyword">FROM</span> 老师 <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 学生 <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> t.id=s.id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yj196/markdown/raw/master/20200508153459.png" alt=""></p><p>right join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT t.name,&#96;project&#96;,s.name,&#96;score&#96; </span><br><span class="line">FROM 老师 AS t</span><br><span class="line">RIGHT JOIN 学生 AS s</span><br><span class="line">ON t.id&#x3D;s.id</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yj196/markdown/raw/master/20200508153615.png" alt=""></p></blockquote><h3 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcFirstDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">       <span class="comment">//加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">       <span class="comment">//用户信息和url</span></span><br><span class="line">        String url=<span class="string">"jdbc:mysql://123.57.13.180:3306/jdbcStudy?useUnicode=t&amp;characterEncoding=utf8&amp;useSSL=true"</span>;</span><br><span class="line">        String username=<span class="string">"sqlyog"</span>;</span><br><span class="line">        String password=<span class="string">"password"</span>;</span><br><span class="line">        <span class="comment">//连接成功,驱动对象  Connection代表数据库</span></span><br><span class="line">       Connection connection=DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//执行SQL对象statement 执行sql的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//执行SQl的对象去执行SQL,可能存在的结果,查看返回结果</span></span><br><span class="line">        String sql=<span class="string">"SELECT * FROM users"</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);<span class="comment">//返回的结果集,结果集中封装了全部查询出来的结果;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id="</span>+resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"name="</span>+resultSet.getObject(<span class="string">"NAME"</span>));</span><br><span class="line">            System.out.println(<span class="string">"id="</span>+resultSet.getObject(<span class="string">"PASSWORD"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
    
      <category term="sql" scheme="https://yj196.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>mysql建立远程连接</title>
    <link href="https://yj196.github.io/2020/05/07/mysql%E5%BB%BA%E7%AB%8B%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>https://yj196.github.io/2020/05/07/mysql%E5%BB%BA%E7%AB%8B%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-05-07T10:13:24.000Z</published>
    <updated>2020-05-07T10:51:12.874Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup <span class="keyword">with</span> -A</span><br><span class="line"></span><br><span class="line"><span class="keyword">Database</span> <span class="keyword">changed</span></span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'sqlyog'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line">                                          <span class="comment">--创建一个sqlyog用户,赋予访问权限与密码</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; grant all on *.* to 'sqlyog'@'%';</span><br><span class="line">                                          <span class="comment">--将权限赋予sqlyog用户</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">                                          <span class="comment">--刷新权限</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; select host,user from mysql.user;</span><br><span class="line">+<span class="comment">-----------------+--------+</span></span><br><span class="line">| host            | user   |</span><br><span class="line">+<span class="comment">-----------------+--------+</span></span><br><span class="line">| %               | sqlyog |</span><br><span class="line">| 127.0.0.1       | root   |</span><br><span class="line">| ::1             | root   |</span><br><span class="line">| iz96re9tm8xzh1z |        |</span><br><span class="line">| iz96re9tm8xzh1z | root   |</span><br><span class="line">| localhost       |        |</span><br><span class="line">| localhost       | root   |</span><br><span class="line">+<span class="comment">-----------------+--------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://yj196.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="https://yj196.github.io/2020/05/07/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <id>https://yj196.github.io/2020/05/07/JavaScript%E5%9F%BA%E7%A1%80/</id>
    <published>2020-05-07T09:13:24.000Z</published>
    <updated>2020-05-09T09:42:57.097Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>  <h3 id="JavaScript的引入"><a href="#JavaScript的引入" class="headerlink" title="JavaScript的引入"></a>JavaScript的引入</h3><blockquote><p>1.内部标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//...</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.外部标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">" abs.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--abs.js为引用的JavaScript文件--&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="基本语法入门"><a href="#基本语法入门" class="headerlink" title="基本语法入门"></a>基本语法入门</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> score=<span class="number">71</span>;<span class="comment">//script中的变量有let与var,var容易出错,一般用let;常量有const;</span></span></span><br><span class="line">        alert(score);</span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(score);</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>利用console.log()在控制台打印变量</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200507200022.png" alt=""></p></blockquote><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">= <span class="comment">&lt;!--赋值--&gt;</span></span><br><span class="line">== <span class="comment">&lt;!--等于(类型可以不同,值相同)--&gt;</span></span><br><span class="line">===<span class="comment">&lt;!--绝对等于(类型,值均相同)--&gt;</span></span><br><span class="line">/**</span><br><span class="line">一般不用==做比较</span><br><span class="line">NaN===NaN，这个与所有的数值都不相等，包括自己</span><br><span class="line">只能通过isNaN(NaN)来判断这个数是否是NaN</span><br><span class="line">尽量避免用浮点数进行比较与运行,会存在精度问题</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><h3 id="常规知识"><a href="#常规知识" class="headerlink" title="常规知识"></a>常规知识</h3><blockquote><h4 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null ,undefined"></a>null ,undefined</h4><blockquote><p>null表示为空,undefined表示未定义</p></blockquote><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><blockquote><p>java中数组要求为同一类型,但JavaScript可以为不同类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;保证代码可读性,尽量使用[]</span><br><span class="line">var arr&#x3D;[1,2,3,4,5,&#39;hello&#39;,null,ture];</span><br><span class="line">new Array(1,2,3,4,&#39;qun&#39;);</span><br></pre></td></tr></table></figure></blockquote><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><blockquote><p>对象用大括号包含其属性与方法</p><p>属性间用逗号隔开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person person= new Person(1,2,3,4,5);</span></span><br><span class="line">ver person=&#123;</span><br><span class="line"> name:<span class="string">'younge'</span>,</span><br><span class="line"> age:<span class="number">23</span>,</span><br><span class="line"> tags:[<span class="string">'js'</span>,<span class="string">'web'</span>] </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> 对象名=&#123;</span><br><span class="line"> 属性名: 属性值,</span><br><span class="line"> 属性名: 属性值,</span><br><span class="line"> ...</span><br><span class="line"> 属性名: 属性值</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person,name=<span class="string">"younge"</span></span><br></pre></td></tr></table></figure><p>动态删除属性 delete</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name</span><br></pre></td></tr></table></figure><p>动态添加新属性给对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.haha=<span class="string">"haha"</span> <span class="comment">//直接给新属性赋值即可</span></span><br></pre></td></tr></table></figure><p>判断属性是否在对象中 xx in xx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'age'</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="string">'tostring'</span> <span class="keyword">in</span> person <span class="comment">//继承</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>判断属性是否是对象自身的 hasOwnProperty()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">'age'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">person.hasOwnProperty(<span class="string">'tostring'</span>)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>获取对象的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.name</span><br><span class="line">person.age</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200507232714.png" alt=""></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200507232844.png" alt="![](https://gitee.com/yj196/markdown/raw/master/20200507232953.png)"></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200507232953.png" alt=""></p><h4 id="严查模式"><a href="#严查模式" class="headerlink" title="严查模式"></a>严查模式</h4><p><img src="https://gitee.com/yj196/markdown/raw/master/20200507232304.png" alt=""></p></blockquote><h3 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h3><blockquote><p>Map:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6 Map</span></span><br><span class="line"><span class="comment">//学生成绩,学生名字</span></span><br><span class="line"><span class="comment">// var name =["tom","jack","xiaoming"];</span></span><br><span class="line"><span class="comment">// var score=[100,93,82];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"tom"</span>,<span class="number">100</span>],[<span class="string">"jack"</span>,<span class="number">93</span>],[<span class="string">"xiaoming"</span>,<span class="number">82</span>]]);</span><br><span class="line"><span class="keyword">var</span> name=map.get(<span class="string">"tom"</span>); <span class="comment">//通过key值获得value</span></span><br><span class="line">map.set(<span class="string">"tom"</span>,<span class="number">92</span>);<span class="comment">//修改键值对</span></span><br><span class="line">map.set(<span class="string">"haha"</span>,<span class="number">32</span>);<span class="comment">//新增键值对</span></span><br><span class="line">map.delete(<span class="string">"tom"</span>);<span class="comment">//删除</span></span><br></pre></td></tr></table></figure><p>Set:无序不重复集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> =new Set([1,234,"ewwe",12])//创建一个<span class="keyword">set</span>集合对象</span><br><span class="line"><span class="keyword">set</span>.add(2);//添加</span><br><span class="line"><span class="keyword">set</span>.delete(1);//删除;</span><br><span class="line">console.log(<span class="keyword">set</span>.has(3));//是否包含某个元素</span><br></pre></td></tr></table></figure></blockquote><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><blockquote><ul><li><p>什么是iterator :   iterator(遍历器是一种机制,一种接口,为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p></li><li><p>iterator作用:</p><blockquote><ol><li>为各种数据结构，提供一个统一的、简便的访问接口；</li></ol></blockquote><blockquote><ol start="2"><li><p>使得数据结构的成员能够按某种次序排列；</p></li><li><p>ES6 创造了一种新的遍历命令<code>for...of</code>循环，Iterator 接口主要为<code>for...of</code>消费。</p></li></ol></blockquote></li><li><p>遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过for of/for in 下标</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> )&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'xiao'</span>,<span class="number">1</span>],[<span class="string">'ming'</span>,<span class="number">2</span>],[<span class="string">'zhang'</span>,<span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span>= new Set([1,2,3,4,5,2,1,3,56,2])</span><br><span class="line">for(let x of <span class="keyword">set</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><ul><li><p>函数定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义方式一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方式二</span></span><br><span class="line"><span class="keyword">var</span> abs =<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数运行过程中遇到return即会停止,如果未定义返回,函数运行结束后会返回undefined</span></span><br></pre></td></tr></table></figure></li><li><p>函数调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(10)</span><br></pre></td></tr></table></figure><p>处理为输入参数时抛出异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> abs =<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="comment">// typeof 操作符返回一个字符串，表示未经计算的操作数的类型,通过typeof返回ture/false来做if条件。</span></span><br><span class="line"><span class="comment">//Number 对象是原始数值的包装对象。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> x!==<span class="string">'number'</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="string">'not a number'</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>变量的作用域</p><ol><li>在函数体内定义的变量,在函数体外是无法使用的</li><li>不同函数体内定义的同一名字的变量是互相不影响的</li><li>内部函数可以访问外部函数的成员,但外部函数无法访问内部函数的成员</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> x=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//内部函数可以访问外部函数,反则不可</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">yj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y=x+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.假设内部变量域外部变量重名</p><p> 假设在JavaScript中函数查找变量从自身函数开始,由内向外查找,假设外部存在这个同名的函数变量,则内  部函数会屏蔽外部函数变量</p></li><li><p>提升变量的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x=<span class="string">"x"</span>+y;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="keyword">var</span> y=<span class="string">"y"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果:xundefined</span></span><br><span class="line"><span class="comment">//说明:js执行引擎,自动提升了y的声明,但不会提升变量y的赋值</span></span><br><span class="line"><span class="comment">/* 等价于如下</span></span><br><span class="line"><span class="comment">  function yj()&#123;</span></span><br><span class="line"><span class="comment">  var x="x"+y;</span></span><br><span class="line"><span class="comment">  var y;</span></span><br><span class="line"><span class="comment">  console.log(x);</span></span><br><span class="line"><span class="comment">   y="y";</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>全局对象window</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x&#x3D;&quot;xxx&quot;;</span><br><span class="line">alert(x);</span><br><span class="line">alert(window.x);&#x2F;&#x2F;默认所有的全局变量,都会自动绑定到window对象下;alert函数本身是window变量</span><br></pre></td></tr></table></figure><p>JavaScript实际上只有一个全局作用域,任何变量(函数也可被视为变量),假设没有在函数作用范围找到,就会向外查找</p></li><li><p>规范</p><blockquote><p>由于我们所有的全局变量都绑定到了window上,如果不同js文件使用了相同的全局变量就会造成冲突</p><p>为了减少冲突,可适当自定义对象,使得一些全局变量绑定在其上</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义全局变量所属的对象</span><br><span class="line">var younge&#x3D;&#123;&#125;;</span><br><span class="line">&#x2F;&#x2F;定义全局变量,并绑定对象</span><br><span class="line">younge.name&#x3D;&#39;yang&#39;&#x2F;&#x2F;定义属性</span><br><span class="line">younge.add(a,b)&#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;&#x2F;&#x2F;定义方法</span><br></pre></td></tr></table></figure></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  

&lt;h3 id=&quot;JavaScript的引入&quot;&gt;&lt;a href=&quot;#JavaScript的引入&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的引入&quot;&gt;&lt;/a&gt;JavaScript的引入&lt;/h3&gt;&lt;blockqu
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://yj196.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>反编译方法</title>
    <link href="https://yj196.github.io/2020/04/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://yj196.github.io/2020/04/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-26T00:39:22.545Z</published>
    <updated>2020-04-26T07:33:17.447Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="本章核心"><a href="#本章核心" class="headerlink" title="本章核心"></a>本章核心</h3><blockquote><ul><li>线程是独立的执行路径,是cpu运行与调度的单位</li><li>在程序运行时,即使没有自己创建线程,后台也有主线程(main线程)与垃圾回收线程(gc线程)</li><li>main线程是程序的入口,一个程序下只能存在一个main方法,main线程</li><li>在一个进程中,如果开辟了多个线程,线程的运行由调度器安排调度,调度器与操作系统相关</li><li>对同一份资源操作时会存在资源抢夺问题,需要加入并发控制</li><li>线程会带来额外的开销,如cpu调度时间,并发控制开销</li></ul></blockquote><h3 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426085830.png" alt=""></p><blockquote><p>1.Thread</p><blockquote><ul><li>自定义线程继承threa类</li><li>重写run()方法,编写线程执行体</li><li>创建线程对象,调用start方法</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">        thread1.start();</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的梦想"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Runnable </p><blockquote><ul><li>定义MyRunnable类实现Runnable接口</li><li>实现run()方法,编写线程执行体</li><li>new一个MyRunnable对象</li><li>new一个Thread对象作为MyRunnable代理</li><li>调用start()方法启动线程</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable1 runnable1 = <span class="keyword">new</span> Runnable1();<span class="comment">//创建兑现实现Runnable1类</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable1);<span class="comment">//创建代理类对象,Thread实现了Runnable接口</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;<span class="comment">//创建类实现Runnable接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一只菜鸡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Runnable线程实现过程中运行了代理模式思想.</strong></p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>继承Thread类</p><blockquote><ul><li>子类继承Thread类具备多线程能力</li><li>启动线程:子类对象. start()</li><li>不建议使用:避免0OP单继承局限性</li></ul></blockquote><p>实现Runnable接口</p><blockquote><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程:传入目标对象+ Thread对象.start()</li><li>推荐使用:避免单继承局限性，灵活方便，方便同-一个对象被多个线程使用</li></ul><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426095428.png" alt=""></p></blockquote></blockquote></blockquote><h3 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426101042.png" alt=""></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p><img src="C:%5CUsers%5Cyounge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200426101252073.png" alt="image-20200426101252073"></p><blockquote><p>总结</p><blockquote><p>真实对象与代理对象都要实现同一接口</p><p>代理对象要代理真实对象</p></blockquote><p>好处</p><blockquote><p>代理对象可以做许多真实对象无法做的事情</p><p>真实对象专注于做自己的事情</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaiLiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        You you=<span class="keyword">new</span> You(<span class="string">"younge"</span>);</span><br><span class="line">        WeddingCompany weddingCompany=<span class="keyword">new</span> WeddingCompany(you);</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first();</span><br><span class="line">        target.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"祝福你们"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h3><blockquote><ul><li><p>λ希腊字母表中排序第十位的字母，英语名称为.ambda</p></li><li><p>避免匿名内部类定义过多</p></li><li><p>其实质属于函数式编程的概念</p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426111944.png" alt=""></p></li></ul></blockquote><blockquote><p>Functional Interface</p><blockquote><p>理解Functional Interface ( 函数式接口)是学习Java8 lambda表达式的关键所在。</p><p>函数式接口的定义</p><blockquote><ul><li>任何接口，如果只包含唯一个抽象方法，那么它就是一个函数式接口。</li><li>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</li></ul></blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426113628.png" alt=""></p><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426113406.png" alt="">)<img src="https://gitee.com/yj196/markdown/raw/master/20200426113027.png" alt=""></p></blockquote></blockquote><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426114423.png" alt=""></p></blockquote><blockquote><p>从操作系统来看</p><blockquote><ul><li>创建状态既是从硬盘读取数据到程序</li><li>就绪状态既是为线程配置pcb(运行环境)</li><li>阻塞状态既是撤去配置的pcb但仍将关于线程的程序留在内存中</li><li>运行状态既是cpu从内存中读取线程相关程序进行运算处理</li><li>死亡状态既是将程序从内存中释放</li></ul></blockquote><p>从java来看</p><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426115134.png" alt=""></p></blockquote></blockquote><h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426140120.png" alt=""></p></blockquote><h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426140310.png" alt=""></p></blockquote><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426140438.png" alt=""></p></blockquote><h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><blockquote><ul><li>礼让线程,让当前执行的线程暂停,但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让cpu重新调度</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Yield1 yield1 = <span class="keyword">new</span> Yield1();</span><br><span class="line">        <span class="keyword">new</span> Thread(yield1,<span class="string">"a"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(yield1,<span class="string">"b"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(yield1,<span class="string">"c"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yield1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程开始执行"</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程结束执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote><ul><li>join合并线程,待此线程执行完成后,再执行其他线程,其他线程阻塞</li><li>可以想象为插队</li></ul></blockquote><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426143109.png" alt=""></p></blockquote><h3 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h3><blockquote><p>Thread.State</p><blockquote><p>NEW :线程还没有被启动</p><p>RUNNABLE:线程正在执行</p><p>BLOCKED:线程处于阻塞态</p><p>WAITING:线程正在等待其他线程执行结束</p><p>TIMED_WAITING:正在等待另一个线程执行动作达到指定等待时间</p><p>TERMINATED:已退出的线程</p></blockquote></blockquote><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426144458.png" alt=""></p></blockquote><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote><ul><li>线程分为用户线程与守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不必等待守护线程执行完毕</li><li>比如gc线程</li></ul></blockquote><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><blockquote><p>并发:同一个对象被多个对象操作,比如抢票</p><p>线程同步: </p><blockquote><p>​        处理多线程问题时,多个线程访问同一个对象,并且某些线程还想修改这个对象.这时候我们就需要线程同步. 线程同步其实就是一种等待机制 ,多个需要同时访问此对象的线程进入这个对象的等待池形成队列,等待前面线程使用完毕，下一一个线程再使用.</p></blockquote><p>同步条件:队列+锁</p></blockquote><blockquote><p>由于同一进程的多个线程共享同一块存储空间,在带来方便的同时,也带来了访问冲突问题,为了保证数据在方法中被访问时的正确性,在访问时加入锁机制synchronized ,当一个线程获得对象的排它锁,独占资源,其他线程必须等待，使用后释放锁即可.存在以下问题:</p><blockquote><ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起;</li><li>在多线程竞争下,加锁,释放锁会导致比较多的上下文切换和调度延时，引起性能问题;</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁 会导致优先级倒置,引起性能问题.</li></ul></blockquote></blockquote><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426151059.png" alt=""></p></blockquote><blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426151251.png" alt=""></p></blockquote><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><blockquote><ul><li>多个线程各自占有一-些共享资源 ,并且互相等待其他线程占有的资源才能运行, 而导致两个或者多个线程都在等待对方释放资源,都停止执行的情形.某一个同步块同时拥有“两个以上对象的锁”时,就可能会发生“死锁”的问题.</li><li>死锁产生原因</li></ul><blockquote><ol><li>互斥条件: 一个资源每次只能被一个进程使用。</li><li>请求与保持条件: 一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:进程已获得的资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol></blockquote></blockquote><h3 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h3><blockquote><ul><li>从JDK 5.0开始, Java提供 了更强大的线程同步机制一通过显式定义 同步锁对象来实现同步。同步锁使用L ock对象充当</li><li>java.til.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对L ock对象加锁，线程开始访问共享资源之前应先获得L ock对象</li><li>ReentrantLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock,可以显式加锁、释放锁。</li></ul></blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426152151.png" alt=""></p><h3 id="synchronized与lock的对比"><a href="#synchronized与lock的对比" class="headerlink" title="synchronized与lock的对比"></a>synchronized与lock的对比</h3><blockquote><ul><li>Lock是显式锁(手动开启和关闭锁，别忘记关闭锁) synchronized是隐式锁, 出了作用域自动释放</li><li>Lock只有代码块锁synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性(提供更多的子类)</li><li>优先使用顺序: .Lock &gt;同步代码块(已经进入了方法体，分配了相应资源) &gt;同步方法(在方法体之外)</li></ul></blockquote><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200426153221.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;本章核心&quot;&gt;&lt;a href=&quot;#本章核心&quot; class=&quot;headerlink&quot; title=&quot;本章核心&quot;&gt;&lt;/a&gt;本章核心&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;线程是独立的执行路径,是cpu运行与调度的单位&lt;
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://yj196.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="https://yj196.github.io/2020/04/25/%E6%B3%9B%E5%9E%8B/"/>
    <id>https://yj196.github.io/2020/04/25/%E6%B3%9B%E5%9E%8B/</id>
    <published>2020-04-25T08:43:14.114Z</published>
    <updated>2020-04-26T00:39:20.040Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
      <category term="javase" scheme="https://yj196.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程基础</title>
    <link href="https://yj196.github.io/2020/04/22/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://yj196.github.io/2020/04/22/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-22T09:13:24.000Z</published>
    <updated>2020-04-22T10:07:12.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java网络编程基础"><a href="#java网络编程基础" class="headerlink" title="java网络编程基础"></a>java网络编程基础</h1><a id="more"></a>  <h3 id="1-网络编程要素"><a href="#1-网络编程要素" class="headerlink" title="1.网络编程要素"></a>1.网络编程要素</h3><blockquote><ul><li><p>如何实现网络通信</p><blockquote><p>通信双方地址:ip+端口号/192.168.124:8080</p><p>规则:网络通信协议:tcp/ip</p></blockquote></li></ul></blockquote><blockquote><p>TCP/IP四层概念模型</p><blockquote><ul><li><p>应用层</p><blockquote><ol><li>应用层决定了向用户提供应用服务时通信的活动</li><li>FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name Syst em，域名系统）服务就是其中两类。HTTP 协议也处于该层。  </li></ol></blockquote></li></ul></blockquote><blockquote><ul><li><p>传输层</p><blockquote><ol><li>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</li><li>在传输层有两个性质不同的协议：TCP（Transmission Control Pr otocol，传输控制协议）和 UDP（User Data Protocol，用户数据 报协议）。 </li></ol></blockquote></li><li><p>网络层</p><blockquote><ol><li>网络层用来处理在网络上流动的数据包。数据包是网络传输的 小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到 达对方计算机，并把数据包传送给对方。 </li><li>网络层所起的作用就是在众多的选项内选择一条传输路线。 </li></ol></blockquote></li><li><p>数据链路层</p><blockquote><ol><li>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备 驱动、NIC（Network Interface Card，网络适配器，即网卡）， 及光纤等物理可见部分（还包括连接器等一切传输媒介）。</li><li>。硬件 上的范畴均在链路层的作用范围之内。</li></ol></blockquote></li></ul></blockquote></blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200422094512.png" alt=""></p><blockquote><p>我们用 HTTP 举例来说明，首先作为发送端的客户端在应用层（ HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。 接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到 的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记 序号及端口号后转发给网络层。 在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发 给链路层。这样一来，发往网络的通信请求就准备齐全了。 接收端的服务器在链路层接收到数据，按序往上层发送，一直到 应用层。当传输到应用层，才能算真正接收到由客户端发送过来 的 HTTP 请求。</p></blockquote><p><img src="https://gitee.com/yj196/markdown/raw/master/20200422094814.png" alt=""></p><blockquote><p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一 个该层所属的首部信息。反之，接收端在层与层传输数据时，每 经过一层时会把对应的首部消去。 这种把数据信息包装起来的做法称为封装（encapsulate）。 </p></blockquote><h3 id="2ip"><a href="#2ip" class="headerlink" title="2ip"></a>2ip</h3><blockquote><ol><li><p>ip在Java中所在的类(InetAdress)</p><blockquote><ul><li>唯一定位一台网络上的计算机</li><li>127.0.0.1:本机:localhost</li><li>ip地址分为:ipv4和ipv6</li></ul></blockquote></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询本机地址</span></span><br><span class="line">            InetAddress inetAddress = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            System.out.println(inetAddress);</span><br><span class="line">            InetAddress inetAddress1 = InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">            System.out.println(inetAddress1);</span><br><span class="line">            InetAddress inetAddress2 = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inetAddress2);</span><br><span class="line">            <span class="comment">//查询网站ip地址</span></span><br><span class="line">            InetAddress inetAddress3 = InetAddress.getByName(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">            System.out.println(inetAddress3);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownHostException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3端口"><a href="#3端口" class="headerlink" title="3端口"></a>3端口</h3><blockquote><p>端口表示计算机上一个程序的进程,即计算机会为每一个应用分配一个端口号</p><blockquote><ul><li>不同的进程有着不同的端口号,用于区分应用</li><li>端口号:0~65535</li><li>TCP与UDP协议下各有65535个端口</li></ul></blockquote></blockquote><blockquote><p>端口分类</p><blockquote><p>公有端口:0~1023</p><blockquote><ul><li>HTTP:80</li><li>HTTPS:443</li><li>FTP:21</li><li>Telent:23</li></ul></blockquote><p>程序注册端口:1024~49151,分配给用户或程序</p><blockquote><ul><li>Tomcat:8080</li><li>MySQL:3306</li><li>Oracle:1521</li></ul></blockquote></blockquote><p>动态,私有:49152~65535</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">cmd</span> /user/administrator</span><br><span class="line"><span class="number">1</span> netstat -ano #查看所有的端口</span><br><span class="line"><span class="number">2</span> netstat -ano|<span class="built_in">findstr</span> "<span class="number">5900</span>"</span><br><span class="line"><span class="number">3</span>.tasklist|<span class="built_in">findstr</span> "<span class="number">8696</span>" #查看指定端口的进程</span><br><span class="line"><span class="number">4</span>.ctr1+ <span class="built_in">shift</span> + ESC </span><br></pre></td></tr></table></figure></blockquote><h3 id="4通信协议"><a href="#4通信协议" class="headerlink" title="4通信协议"></a>4通信协议</h3><blockquote><ul><li><p>协议:约定，就好比我们现在说的是普通话。</p></li><li><p>网络通信协议:速率,传输码率,代码结构，传输控制…. .</p></li><li><p>问题:非常的复杂?</p><p>大事化小:分层!</p></li><li><p>重要</p><blockquote><ul><li>TCP:用户传输协议(类似打电话)</li><li>UDP:用户数据报协议(类似发广播)</li></ul></blockquote></li><li><p>TCP Vs UDP</p><blockquote><p>TCP:打电话</p><blockquote><ul><li>连接,稳定</li><li>三次握手四次挥手</li><li>客户端、服务端</li><li>传输完成，释放连接，效率低</li><li><img src="https://gitee.com/yj196/markdown/raw/master/20200422111412.png" alt=""></li></ul></blockquote><p>UDP:发短信</p><blockquote><ul><li>不连接，不稳定</li><li>客户端、服务端:没有明确的界限</li><li>不管有没有准备好，都可以发给你..</li><li>导弹</li><li>DDOS: 洪水攻击! (饱和攻击)</li></ul></blockquote></blockquote></li></ul></blockquote><h3 id="5-TCP"><a href="#5-TCP" class="headerlink" title="5.TCP"></a>5.TCP</h3><blockquote><p>客户端</p><blockquote><ol><li>连接服务器Socket</li><li>发送消息</li></ol></blockquote><p>服务器</p><blockquote><ol><li>建立服务的端口ServerSocket</li><li>等待用户的链接accept</li><li>接收用的消息</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InetAddress serverIp=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//要知道服务器地址,服务器端口号</span></span><br><span class="line">            serverIp = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//创建socket连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(serverIp,port);</span><br><span class="line">            <span class="comment">//发送消息 io流</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"小胖啊小胖"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (os!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket=<span class="keyword">null</span>;</span><br><span class="line">        Socket accept=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//要有一个地址,且可以通过socket来连接</span></span><br><span class="line">             serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//等待连接</span></span><br><span class="line">             accept = serverSocket.accept();</span><br><span class="line">            <span class="comment">//读取客户端的消息</span></span><br><span class="line">             is = accept.getInputStream();</span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">             baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (baos!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (accept!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    accept.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="6利用tcp传输文件"><a href="#6利用tcp传输文件" class="headerlink" title="6利用tcp传输文件"></a>6利用tcp传输文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建socket链接</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.建立socket的输出流</span></span><br><span class="line">        OutputStream os=socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.读取文件</span></span><br><span class="line">        FileInputStream fls = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"ironman.jpg"</span>));</span><br><span class="line">        <span class="comment">//4.写出文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fls.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.关闭资源</span></span><br><span class="line">        fls.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//监听客户端的连接</span></span><br><span class="line">        Socket socket=serverSocket.accept();<span class="comment">//阻塞式监听,会一直等待客户端的连接</span></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//文件的输出</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"receive.jpg"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fileOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><blockquote><p>和发短信一样,不需要知道对方地址</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package site.tgkw.lesson04;</span><br><span class="line"></span><br><span class="line">import java.net.DatagramPacket;</span><br><span class="line">import java.net.DatagramSocket;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.SocketException;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不需要连接服务器</span><br><span class="line">public class UdpClientTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;建立一个socket</span><br><span class="line">        DatagramSocket socket&#x3D; new DatagramSocket();</span><br><span class="line">        &#x2F;&#x2F;建个包</span><br><span class="line">         String msg&#x3D;&quot;nhafwq&quot;;</span><br><span class="line">        InetAddress localhost &#x3D; InetAddress.getByName(&quot;localhost&quot;);</span><br><span class="line">        int port&#x3D;9090;</span><br><span class="line">        &#x2F;&#x2F;数据,数据的长度始末,要发给谁</span><br><span class="line">        DatagramPacket packet&#x3D; new DatagramPacket(msg.getBytes(),0,msg.length(),localhost,port);</span><br><span class="line">        &#x2F;&#x2F;发送包</span><br><span class="line">         socket.send(packet);</span><br><span class="line">        &#x2F;&#x2F;关闭流</span><br><span class="line">         socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClientTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     <span class="comment">//开放端口</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">     <span class="comment">//接受数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">        socket.receive(packet);<span class="comment">//阻塞接受</span></span><br><span class="line">        System.out.println(packet.toString());</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用UDP通过多线程实现实时聊天</p><p><a href="https://www.bilibili.com/video/BV1LJ411z7vY/?p=11" target="_blank" rel="noopener"></a></p></blockquote><h3 id="URL下载网络资源"><a href="#URL下载网络资源" class="headerlink" title="URL下载网络资源"></a>URL下载网络资源</h3><p><img src="https://gitee.com/yj196/markdown/raw/master/20200422174054.png" alt=""></p><blockquote><p>下载网络资源</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">package</span> site.tgkw;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line">&gt;<span class="keyword">import</span> java.io.IOException;</span><br><span class="line">&gt;<span class="keyword">import</span> java.io.InputStream;</span><br><span class="line">&gt;<span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line">&gt;<span class="keyword">import</span> java.net.URL;</span><br><span class="line">&gt;<span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       URL url = <span class="keyword">new</span> URL(<span class="string">"http://image.baidu.com/search/detail"</span>);</span><br><span class="line">       HttpURLConnection urlConnection =(HttpURLConnection) url.openConnection();</span><br><span class="line">       InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">       FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test1.jpg"</span>);</span><br><span class="line">       <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> len;</span><br><span class="line">       <span class="keyword">while</span> ((len=inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">       &#125;</span><br><span class="line">       fos.close();</span><br><span class="line">       inputStream.close();</span><br><span class="line">       urlConnection.disconnect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java网络编程基础&quot;&gt;&lt;a href=&quot;#java网络编程基础&quot; class=&quot;headerlink&quot; title=&quot;java网络编程基础&quot;&gt;&lt;/a&gt;java网络编程基础&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://yj196.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>javaGui基础</title>
    <link href="https://yj196.github.io/2020/04/20/javaGui%E5%9F%BA%E7%A1%80/"/>
    <id>https://yj196.github.io/2020/04/20/javaGui%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-20T11:06:42.272Z</published>
    <updated>2020-04-20T14:57:21.198Z</updated>
    
    <content type="html"><![CDATA[<p>JAVAGUI</p><a id="more"></a>  <h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[javaGui] --&gt;B(AWT)</span><br><span class="line">A[javaGui] --&gt;C(Spring)</span><br><span class="line">B(AWT)--&gt;D(Frame)    </span><br><span class="line">C(Spring)--&gt;E(JErame)</span><br></pre></td></tr></table></figure><h3 id="面板panel"><a href="#面板panel" class="headerlink" title="面板panel"></a>面板panel</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//panel可以看作一个空间但不能单独存在，依赖与frame</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> Frame();</span><br><span class="line">        <span class="comment">//布局的概念</span></span><br><span class="line">        Panel panel1=<span class="keyword">new</span> Panel();</span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//设置panel坐标，相对frame</span></span><br><span class="line">        panel1.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        panel1.setBackground(<span class="keyword">new</span> Color(<span class="number">62</span>, <span class="number">40</span>, <span class="number">187</span>));</span><br><span class="line">        <span class="comment">//frame.add(panel1)</span></span><br><span class="line">        frame.add(panel1);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//监听事件</span></span><br><span class="line">        <span class="comment">//适配器模式</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//窗口点击关闭时需要做的事情</span></span><br><span class="line">               System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[布局管理器] --&gt;B(流式布局)</span><br><span class="line">A --&gt;C(东南西北中)</span><br><span class="line">A --&gt;D(表格布局)</span><br></pre></td></tr></table></figure><blockquote><p>总结</p><blockquote><ol><li><p>Frame是-一个顶级窗口</p></li><li><p>Panel无法单独显示，必须添加到某个容器中。</p></li><li><p>布局管理器</p><blockquote><ol><li>流式  FlowLayout</li><li>东西南北中 BorderLayout</li><li>表格  GridLayout </li></ol></blockquote></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li>大小，定位，背景颜色，可见性，监听!</li></ol></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGridLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"TestBordLayout"</span>);</span><br><span class="line">        Button btn1 = <span class="keyword">new</span> Button(<span class="string">"btn1"</span>);</span><br><span class="line">        Button btn2 = <span class="keyword">new</span> Button(<span class="string">"btn2"</span>);</span><br><span class="line">        Button btn3 = <span class="keyword">new</span> Button(<span class="string">"btn3"</span>);</span><br><span class="line">        Button btn4 = <span class="keyword">new</span> Button(<span class="string">"btn4"</span>);</span><br><span class="line">        Button btn5 = <span class="keyword">new</span> Button(<span class="string">"btn5"</span>);</span><br><span class="line">        Button btn6 = <span class="keyword">new</span> Button(<span class="string">"btn6"</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line">        frame.pack();<span class="comment">//java函数，自动布局填充；</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[事件监听] --&gt;B(输入框监听TextField)</span><br><span class="line">A --&gt;C(鼠标监听)</span><br><span class="line">A --&gt;D(键盘监听)</span><br><span class="line">A --&gt;E(窗口监听)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.tgkw.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTextEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> MyFrame();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span> <span class="keyword">throws</span> HeadlessException </span>&#123;</span><br><span class="line">        TextField textField = <span class="keyword">new</span> TextField();</span><br><span class="line">        add(textField);<span class="comment">//在frame上增加了一个文本框，但没有办法监听输入</span></span><br><span class="line">        <span class="comment">//监听文本框输入</span></span><br><span class="line">        MyActionListener2 myActionListener2 = <span class="keyword">new</span> MyActionListener2();</span><br><span class="line">        <span class="comment">//按下enter就会触发这个输入框的事件</span></span><br><span class="line">        textField.addActionListener(myActionListener2);<span class="comment">//给文本框增加监听</span></span><br><span class="line">        <span class="comment">//增加一个对关闭键的事件</span></span><br><span class="line">        ShoutDown shoutDown = <span class="keyword">new</span> ShoutDown();</span><br><span class="line">        addWindowListener(shoutDown);</span><br><span class="line">        <span class="comment">//设置替换框编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">'*'</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener2</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">      TextField field=(TextField) e.getSource();<span class="comment">//获得一些资源,返回一些对象</span></span><br><span class="line">        System.out.println(field.getText());<span class="comment">//获得输入框的文本</span></span><br><span class="line">        field.setText(<span class="string">""</span>);<span class="comment">//设置文本每次输入后清空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoutDown</span> <span class="keyword">extends</span> <span class="title">WindowAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h2><h3 id="jframe"><a href="#jframe" class="headerlink" title="jframe"></a>jframe</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJframe2</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span> .setBounds( x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="number">200</span>, height: <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">this</span> . setVisible(<span class="keyword">true</span>);</span><br><span class="line">    JLabel <span class="number">1</span>abel = <span class="keyword">new</span> JLabel( text: “欢迎米到狂神说Java系列节目<span class="string">");</span></span><br><span class="line"><span class="string">    this . add(1abe1);</span></span><br><span class="line"><span class="string">    //让文术标签居中,设置水平对齐</span></span><br><span class="line"><span class="string">    label. setHorizontalAlignment (SwingConstants .CENTER);</span></span><br><span class="line"><span class="string">    //获得一个容器</span></span><br><span class="line"><span class="string">    Container container = this. getContentPane();</span></span><br><span class="line"><span class="string">    container. setBackground(Color . YELLOW);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DialogDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">this</span>.setSize( width: <span class="number">700</span>, height: <span class="number">500</span>) ;</span><br><span class="line">  <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class="comment">//设置关闭</span></span><br><span class="line">  <span class="comment">//JFrame放东西，容器</span></span><br><span class="line">  Container container = <span class="keyword">this</span>. getContentPane();</span><br><span class="line">  <span class="comment">//绝对布局</span></span><br><span class="line">  container.setlayout (nu11);</span><br><span class="line">  <span class="comment">//按钮</span></span><br><span class="line">  JButton button = <span class="keyword">new</span> JButton( text: <span class="string">"点击弹出一个对话框"</span>); <span class="comment">//创建</span></span><br><span class="line">  button.setBounds( x: <span class="number">30</span>, y: <span class="number">30</span>, width: <span class="number">200</span>, height: <span class="number">50</span>);</span><br><span class="line">  <span class="comment">//点击这个按钮的时候，弹出一个弹窗</span></span><br><span class="line">  button.addActionListener(<span class="keyword">new</span> ActionListener() &#123; <span class="comment">//</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">  container.add(button);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> JLabl(<span class="string">"xxx"</span>);</span><br></pre></td></tr></table></figure><h3 id="图标与图片"><a href="#图标与图片" class="headerlink" title="图标与图片"></a>图标与图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageIconDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ImageIconDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//获收图片的地址</span></span><br><span class="line">    JLabel label = <span class="keyword">new</span> JLabel( text: <span class="string">"ImageIcon"</span>);</span><br><span class="line">    URL url=ImageIconDemo.class.getResource(name:"tx.jpg");</span><br><span class="line">    ImageIcon imageIcon = <span class="keyword">new</span> ImageIcon(ur1);  </span><br><span class="line">    label. setIcon( imageIcon);</span><br><span class="line">    label.setHorizontalAlignment(SwingConstants . CENTER);<span class="comment">//设置图片位置居中</span></span><br><span class="line">    Container container. = getContentPane();</span><br><span class="line">    container.add(label);</span><br><span class="line">    setVisible(<span class="keyword">true</span>);</span><br><span class="line">    setDefaultCloseoperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    setBounds( x:<span class="number">100</span>,y:<span class="number">100</span>,width:<span class="number">200</span>,height:<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jpanel"><a href="#jpanel" class="headerlink" title="jpanel"></a>jpanel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JPanelDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line">  container.setLayout(<span class="keyword">new</span> GridLayout( rows2, col1, hgap:<span class="number">1</span>, vgap1:));</span><br><span class="line">  JPanel panel1 = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout( rows:<span class="number">1</span>, col3));</span><br><span class="line">  pane11. add(<span class="keyword">new</span> JButton( text: <span class="string">"1"</span> ));</span><br><span class="line">  panel1. add(<span class="keyword">new</span> JButton( text: <span class="string">"1"</span>));</span><br><span class="line">  panel1. add(<span class="keyword">new</span> JButton( text <span class="string">"1"</span>));</span><br><span class="line">  container.add( panel1);</span><br><span class="line">  <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">  <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br></pre></td></tr></table></figure><h3 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h3><blockquote><p>//在panl下可以实现，但frame与container下不一定实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrollDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">JScrollDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line">    <span class="comment">//文本域</span></span><br><span class="line">    JTextArea textArea = <span class="keyword">new</span> JextArea( rows: <span class="number">20</span>,<span class="number">1</span> columns: <span class="number">50</span>) ;</span><br><span class="line">    textArea.setText(<span class="string">"欢迎学习狂神说Java"</span>);</span><br><span class="line">    <span class="comment">//Scroll面板</span></span><br><span class="line">    JScrollPane scrollPane = newJScrollPane(textArea) ;</span><br><span class="line">    container.add(scrollPane);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setBounds( X: <span class="number">100</span>, VE <span class="number">100</span>, width: <span class="number">300</span>, height: <span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ ON_ CLOSE);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JScrollDemo();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span>. getContentPane();</span><br><span class="line">    <span class="comment">//将个图片变为图标</span></span><br><span class="line">    URL resource = JButtonDemo01. class . getResource( name: "tx. jpg");</span><br><span class="line">    Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line">    <span class="comment">//把这个图标放在按钮上:</span></span><br><span class="line">    JButton button = <span class="keyword">new</span> JButton();</span><br><span class="line">    button.setIcon(icon);</span><br><span class="line">    button.setToolTipText(<span class="string">"图片按钮"</span>);</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    container.add(button);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setsize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">this</span>.<span class="function">setDefaultCloseoperat <span class="title">ion</span><span class="params">(WindowConstants . EXIT ON_ CLOSE)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JButtonDemo01( );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line"><span class="comment">//单选框</span></span><br><span class="line">JRadioButton radioButton1 = <span class="keyword">new</span> JRadioButton( text: <span class="string">"JRadioButton01"</span>);</span><br><span class="line">JRadioButton radioButton2 = <span class="keyword">new</span> JRadioButton( text: <span class="string">"JRadioButton02"</span>);</span><br><span class="line">JRadioButton radioButton3 = <span class="keyword">new</span> JRadioButton( text: <span class="string">"JRadioButton03"</span>);</span><br><span class="line"><span class="comment">//山于单选框只能选择“个， 分组,一个组中只能选择 。 个</span></span><br><span class="line">ButtonGroup group = <span class="keyword">new</span> ButtonGroup( );</span><br><span class="line">group.add(radioButton1) ;</span><br><span class="line">group.add(radioButton2);</span><br><span class="line">group.add(radioButton3);</span><br><span class="line">container.add(radioButton1,Borderlayout.CENTER);</span><br><span class="line">container.add(radioButton2,BorderLayout.NORTH);</span><br><span class="line">container.add( radioButton3,BorderLayout.SOUTH) ;</span><br><span class="line"><span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span>.setSize( width: <span class="number">500</span>, height <span class="number">300</span>);</span><br><span class="line"><span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ ON_ CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> JButtonDemo02();</span><br></pre></td></tr></table></figure><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt. <span class="number">5</span></span><br><span class="line"><span class="keyword">import</span> j ava。net。URL;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JButtonDemo03</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JButtonDemo03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line"><span class="comment">//将“个 图片变为图标</span></span><br><span class="line">URL resource = JButtonDemo01 . class . getResource( name: "tx.jpg" );</span><br><span class="line">Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line"><span class="comment">//多选框</span></span><br><span class="line">JCheckBox checkBox01 = <span class="keyword">new</span> JCheckBox( text”checkBox01<span class="string">");</span></span><br><span class="line"><span class="string">JCheckBox checkBox02 = new JCheckBox( text”checkBox02"</span> );</span><br><span class="line">container，add( checkBox01，BorderL ayout . NORTH);</span><br><span class="line">container . add( checkBox02, BorderLayout . SOUTH);</span><br><span class="line"><span class="keyword">this</span>。setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span> . setSize( width: <span class="number">500</span>, height <span class="number">300</span>);</span><br><span class="line"><span class="keyword">this</span> . setDefaultCloseOperation(WindowConstants . EXIT .ON_ CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> JButtonDemo03( );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span>. getContentPane();</span><br><span class="line">    JComboBox status = <span class="keyword">new</span> JComboBox();</span><br><span class="line">    status.addItem( nu11);</span><br><span class="line">    status.addItem(<span class="string">"正在热映"</span>);</span><br><span class="line">    status.addItem(<span class="string">"已下架"</span>);|</span><br><span class="line">    status.addItem(<span class="string">"即将上映"</span>);</span><br><span class="line">    container.add(status);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setSize( width: <span class="number">500</span>，height: <span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants. EXIT_ ON CLOSE);</span><br></pre></td></tr></table></figure><h3 id="列表框"><a href="#列表框" class="headerlink" title="列表框"></a>列表框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo02</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Container container = <span class="keyword">this</span> . getContentPane();</span><br><span class="line">    <span class="comment">//生成列表的内容</span></span><br><span class="line">    <span class="comment">//String[] contents = &#123;"1","2", "3"&#125;;</span></span><br><span class="line">    Vector&lt;object&gt;contents = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    <span class="comment">//列表中需要放入内容</span></span><br><span class="line">    JList jList = <span class="keyword">new</span> JList(contents);</span><br><span class="line">    container. add(jList);</span><br><span class="line">    <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>.setSize( width: <span class="number">500</span>, height: <span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants. EXIT ON_ CLOSE);</span><br></pre></td></tr></table></figure><h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrol1Demo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> JScro11DemoO&#123;</span><br><span class="line">    Container container =<span class="keyword">this</span>.getContentPaneO;</span><br><span class="line">    <span class="comment">//文本域</span></span><br><span class="line">    JTextarea textarea = <span class="keyword">new</span> JTextArea(<span class="number">20</span>， <span class="number">50</span>);</span><br><span class="line">    textArea.setText(<span class="string">"younge"</span>);</span><br><span class="line">    <span class="comment">//scro11面板</span></span><br><span class="line">    JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane (textArea);</span><br><span class="line">    container. add(scro11Pane);</span><br><span class="line">    <span class="keyword">this</span>. setVisible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">this</span>. setBounds (<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>,<span class="number">350</span>);</span><br><span class="line">    <span class="keyword">this</span>. <span class="function">setDefaultcloseoperati <span class="title">on</span> <span class="params">(windowConstants. EXIT ON CLOSE)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JScrol1Demo();</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVAGUI&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://yj196.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>各种视图</title>
    <link href="https://yj196.github.io/2020/04/20/%E5%90%84%E7%A7%8D%E8%A7%86%E5%9B%BE/"/>
    <id>https://yj196.github.io/2020/04/20/%E5%90%84%E7%A7%8D%E8%A7%86%E5%9B%BE/</id>
    <published>2020-04-20T09:52:57.292Z</published>
    <updated>2020-04-20T14:58:42.584Z</updated>
    
    <content type="html"><![CDATA[<p>流程图</p><a id="more"></a>  <hr><p>title: Markdown使用方法<br>date: 2020-04-14 17:13:24<br>tags: markdown</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流程图&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>e.getSource()理解</title>
    <link href="https://yj196.github.io/2020/04/20/e.getSource%E7%90%86%E8%A7%A3/"/>
    <id>https://yj196.github.io/2020/04/20/e.getSource%E7%90%86%E8%A7%A3/</id>
    <published>2020-04-20T01:06:53.549Z</published>
    <updated>2020-04-20T14:59:22.050Z</updated>
    
    <content type="html"><![CDATA[<p>e.getSource()理解</p><a id="more"></a>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * The object on which the Event initially occurred.</span><br><span class="line">     *</span><br><span class="line">     * @return   The object on which the Event initially occurred.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Object getSource() &#123;</span><br><span class="line">        return source;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>其返回类型为object类型，即可以转换为任意其他类型，返回的object类型source为从鼠键屏事件所发出的事件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">         MyFrame myFrame=(MyFrame) e.getSource();</span><br><span class="line">         <span class="comment">//这样当在界面点击时即会产生点</span></span><br><span class="line">           <span class="keyword">new</span> Point(e.getX(),e.getY());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>‘MyFrame myFrame=(MyFrame) e.getSource()’ ;  把事件源转换成你点击的那个对象类。这样你的a就可以用MyFrame里面的变量与方法了。<br>如果你有许多控件事件，这样写还可以区分你获得的是哪个控件事件的事件源。JButton a=</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;e.getSource()理解&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java.GUI" scheme="https://yj196.github.io/tags/java-GUI/"/>
    
  </entry>
  
  <entry>
    <title>反编译方法</title>
    <link href="https://yj196.github.io/2020/04/16/%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/"/>
    <id>https://yj196.github.io/2020/04/16/%E5%8F%8D%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95/</id>
    <published>2020-04-16T11:27:42.645Z</published>
    <updated>2020-04-20T14:57:51.694Z</updated>
    
    <content type="html"><![CDATA[<p>反编译方法</p><a id="more"></a><p>1将class文件通过文件层移动到一个idea能够找到的位置</p><p>2移动后idea如下</p><p>3双击idea中的class文件即可得到反编译的java文件</p><p><img src="C:%5CUsers%5Cyounge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200416205225570.png" alt="image-20200416205225570"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反编译方法&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://yj196.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="https://yj196.github.io/2020/04/16/java%E5%9F%BA%E7%A1%80/"/>
    <id>https://yj196.github.io/2020/04/16/java%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-18T15:10:01.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javaSE基础"><a href="#javaSE基础" class="headerlink" title="javaSE基础"></a>javaSE基础</h3><a id="more"></a><h3 id="win快捷键"><a href="#win快捷键" class="headerlink" title="win快捷键"></a>win快捷键</h3><pre><code>Win+R----&gt;运行shift+deldete--&gt;彻底删除ctrl+shift+esc--&gt;任务管理器ctrl+A--&gt;全选ctrl+Z--&gt;撤销</code></pre><h3 id="打开cmd的方式"><a href="#打开cmd的方式" class="headerlink" title="打开cmd的方式"></a>打开cmd的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​    1.开始+系统+命令提示</span><br><span class="line">​    2.Win键+R输入cmd打开控制台(推荐使用)</span><br><span class="line">​    3.在任意的文件夹下面，按住shift键 +鼠标右键点击，在此处打开命令行窗口</span><br><span class="line">​    4.资源管理器的地址栏前面加上cmd路径</span><br><span class="line">​     管理员方式运行:选择以管理员方式运行</span><br></pre></td></tr></table></figure><h3 id="B与b的区别"><a href="#B与b的区别" class="headerlink" title="B与b的区别"></a>B与b的区别</h3><ul><li><p>B=byte,等于B=b；</p></li><li><p>b=bit，位，计算机最小储存单位</p></li></ul><h3 id="常量修饰符"><a href="#常量修饰符" class="headerlink" title="常量修饰符"></a>常量修饰符</h3><ul><li><p>final ：初始化后，其值不再改变</p></li><li><p>static final ：真正意义上的常量，在对象初始化之前存在，即在类加载到方法区时即存在</p></li></ul><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a><strong><em>变量命名规范</em></strong></h3><blockquote><ul><li>所有的变量，方法，类名：见名知章</li><li>类成员变量：首字母小写与驼峰原则：monthSalary 除了第一个单词外，后面的单词首字母均大写</li><li>局部变量：首字母小写与驼峰原则</li><li>常量：<em>大写字母与下划线MAX_VALUE</em></li><li>类名：首字母大写与驼峰原则：Man，GoodMan；</li><li>方法名：首字母小写和驼峰原则：run（），runRun（）；</li></ul></blockquote><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><blockquote><ul><li><p>为了更好的组织类，Java提供了包机制，用与区别类名的命名空间</p></li><li><p>包语句的语句格式：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3...]]</span><br></pre></td></tr></table></figure></li><li><p>一般公司域名倒置作为包名：site.tgkw.***</p></li><li><p>为了能够使用某个包的成员，我们需要用import语句来导入包；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">package</span> pkg1[.pkg2[.pkg3...]]</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><blockquote><p>用于生成自己的API文档</p><blockquote><ul><li><p>参数信息</p><blockquote><p>@author 作者</p><p>@versio 版本号</p><p>@since 指明最早使用的jdk版本</p><p>@param 参数名</p><p>@return 返回值情况</p><p>@throws 异常抛出情况</p></blockquote></li></ul></blockquote></blockquote><h3 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h3><blockquote><ul><li><p>next ()</p><blockquote><ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效数字前的空白，next()会自动去掉</li><li>只有输入有效字符后输入的空白才能作为分割符与结束符</li><li>next（）不能得到带有空格的字符串</li></ol></blockquote></li></ul></blockquote><blockquote><ul><li><p>nextLine()</p><blockquote><ol><li>以Enter为结束符，也就是说nextLine（）方法返回的是输入回车前的所有字符</li><li>可以获取空白</li></ol></blockquote></li></ul></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>  younge</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&gt;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//我们可以输入多个数字，并求其总和与平均数，每输入一个数字就用回车确认，通过输入非数字来接受输入并输出执行结果；</span></span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span>  m=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(scanner.hasNextDouble())&#123;</span><br><span class="line">           <span class="keyword">double</span> x=scanner.nextDouble();</span><br><span class="line">           sum=sum+x;</span><br><span class="line">           m++;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(m+<span class="string">"个数的和为"</span>+sum);</span><br><span class="line">       System.out.println(m+<span class="string">"个数的平均值"</span>+(sum/m));</span><br><span class="line">       scanner.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句：表达式)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String name&#x3D;&#39;abcdzfv&#39;;</span><br><span class="line">i&#x3D;0;</span><br><span class="line">for(int vo:name)&#123;</span><br><span class="line"> i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="break-contiune"><a href="#break-contiune" class="headerlink" title="break contiune"></a>break contiune</h3><blockquote><ol><li>break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。(break语 句也在switch语句中使用)</li><li>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一-次是否执行循环的判定。</li></ol></blockquote><h3 id="java方法"><a href="#java方法" class="headerlink" title="java方法"></a>java方法</h3><blockquote><p>调用方法：对象名.方法名（实参列表）</p><p>java支持两种调用方式，根据方法是否返回值来选择</p><blockquote><ul><li><em>当方法返回一个值的时候，方法调用通常被当做一个值，例如：</em></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">int</span> larger=max(<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><blockquote><ul><li>当方法返回值是void，方法调用一定是一条语句</li></ul></blockquote></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello,kuangshen!"</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><blockquote><ul><li><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数</p></li><li><p>方法重载的规则</p><blockquote><p>◆方法名称必须相同。<br>◆参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。<br>◆方法的返回类型可以相同也可以不相同。<br>◆仅仅返回类型不同不足以成为方法的重载。</p></blockquote></li></ul></blockquote><blockquote><ul><li><p>重载的实现理论</p><blockquote><p>◆方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对<br>应的方法，如果匹配失败，则编译器报错。</p></blockquote></li></ul></blockquote><h3 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h3><blockquote><ul><li><p>有时希望一个程序运行时再传递给它信息，这要靠传递命令行参数给main（）函数实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">            System.out.println(arg[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><blockquote><ul><li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后加一个省略号(..)。</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它<br>之前声明。</li></ul></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... numbers)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(number.length==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>◆A方法调用B方法，我们很容易理解!</p><p>◆递归就是: A方法调用A方法!就是自己调用自己</p><p>◆利用递归可以用简单的程序来解决-些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题 相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</p><p>◆递归结构包括两个部分:</p><blockquote><p>◆递归头:什么时候不调用自身方法。如果没有头,将陷入死循环。<br>◆递归体:什么时候需要调用自身方法。</p></blockquote></blockquote><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><blockquote><p>◆数组是相同类型数据的有序集合.<br>◆数组描述的是相同类型的若干个数据,按照一定的先后次序排列组合而成。<br>◆其中,每一个数据称作一个数组元素,每个数组元素可以通过一个下标来访问它们。</p></blockquote><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><blockquote><p>JAVA内存</p><ul><li><p>堆</p><blockquote><ol><li>存放new的对象与数组</li><li>可以被所有的线程共享，不会存放别的线程引用</li></ol></blockquote></li><li><p>栈</p><blockquote><ol><li>存放基本变量类型（包括这个基本变量的具体数值）</li><li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li></ol></blockquote></li><li><p>方法区</p><blockquote><ol><li>会被使用的线程共享（所以static方法可以不用指定类，直接调用）</li><li>包含所有的class，和static变量</li></ol></blockquote></li></ul></blockquote><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><blockquote><ul><li><p>数组的工具类java.util.Arrays</p></li><li><p>由于数组对象本身并没有什么方法可以供我们调用,但API中提供了-一个工具类Arrays供我们使<br>用,从而可以对数据对象进行一些基本的操作。</p></li><li><p>查看JDK帮助文档</p></li><li><p>Arrays类中的方法都是static修饰的静态方法,在使用的时候可以直接使用类名进行调用,而”不<br>  用”使用对象来调用(注意:是”不用”而不是“不能”)</p></li><li><p>具有以下常见功能</p><blockquote><ul><li>给数组赋值:通过fill方法。</li><li>对数组排序:通过sort方法，按升序。</li><li>比较数组:通过equals方法比较数组中元素值是否相等。</li><li>查找数组元素:通过binarySearch方法能对排序好的数组进行分查找法操作。</li></ul></blockquote></li></ul></blockquote><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote><ul><li><p>面向对象（Object-Oriented Programming,oop）的本质</p><blockquote><p>以类的方式组织代码，以对象的形式封装数据</p></blockquote></li><li><p>三大特性</p><blockquote><ul><li>封装</li><li>继承</li><li>多态</li></ul></blockquote></li></ul></blockquote><h3 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h3><blockquote><ul><li><p>使用new关键字创建对象</p></li><li><p>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化<br>以及对类中构造器的调用。</p></li><li><p>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩<br>个特点:</p><blockquote><ul><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ul></blockquote></li></ul></blockquote><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote><ul><li><p>将实例变量（属性）设为私有，然后加入公开的set/get方法来设置（获取）实例变量的值</p></li><li><p>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉;低耦合:仅暴露少量的方法给外部使用。</p></li><li><p>封装(数据的隐藏)</p><blockquote><ul><li>通常，应禁止直接访问-一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li></ul></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#x2F;&#x2F;ctrl+insert自动生成get&#x2F;set</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;package site.oop.Demo2;</span><br><span class="line">&gt;&#x2F;&#x2F;学生类</span><br><span class="line">&gt;public class Student &#123;</span><br><span class="line">   &#x2F;&#x2F;属性：字段</span><br><span class="line">   &#x2F;&#x2F;属性私有</span><br><span class="line">  private String name;</span><br><span class="line">  &#x2F;&#x2F;提供允许可以操作属性的一些方法</span><br><span class="line">   &#x2F;&#x2F; 提供一些public的get，set方法</span><br><span class="line">   &#x2F;&#x2F;get获得这个数据</span><br><span class="line">   &#x2F;&#x2F;set给这个属性赋值</span><br><span class="line">   public String getName()&#123;</span><br><span class="line">       return  this.name;</span><br><span class="line">   &#125;</span><br><span class="line">   public  void setName(String name)&#123;</span><br><span class="line">       this.name&#x3D;name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><ul><li><p>继承的本质是对某批类的抽象， 从而实现对现实世界更好的建模。</p></li><li><p>extends的意思是“扩展”。子类是父类的扩展。</p></li><li><p>JAVA中类只有单继承，没有多继承!</p></li><li><p>继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等。</p></li><li><p>继承关系的俩个类，-个为子类(派生类),一个为父类(基类)。 子类继承父类,使用关键字extends来表示。</p></li><li><p>子类和父类之间，从意义上讲应该具有”is a”的关系.</p></li></ul><ul><li><p>object类</p></li><li><p>super- this</p></li><li><p>方法重写:重点—&gt;多态</p></li><li><p>super注意点：</p><blockquote><ol><li>super调用父类的构造方法，必须在构造方法的第-一个</li><li>super必须只能出现在子类的方法或者构造方法中! </li><li>super和this不能同时调用构造方法!</li></ol></blockquote></li></ul></blockquote><blockquote><ul><li><p>super vs this 注意点</p><blockquote><ul><li><p>代表对象不同</p><blockquote><p>this:本身调用者这个对象</p><p>super:代表父类对象的应用</p></blockquote></li><li><p>前提不同</p><blockquote><p>this:没哟继承也可以使用</p><p>super:只能在继承条件才可以使用</p></blockquote></li><li><p>构造方法不同</p><blockquote><p>this:本类构造方法</p><p>super:父类构造方法</p></blockquote></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li><p>重写(子类重写父类的方法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重写快捷键:Alt+Inert:override</span><br></pre></td></tr></table></figure></li></ul><blockquote><ol><li><p>方法名必须相同</p></li><li><p>参数列表列表相同</p></li><li><p>修饰符:范围可以扩大不能缩小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public&gt;protected&lt;Default&lt;Private</span><br></pre></td></tr></table></figure></li><li><p>抛出异常:范围可以缩小不能扩大</p></li></ol></blockquote></blockquote><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><ul><li><p>即同- -方法可以根据发送对象的不同而采用多种不同的行为方式。</p></li><li><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</p></li><li><p>多态存在的条件</p><blockquote><ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></blockquote></li><li><p>注意:多态是方法的多态，属性没有多态性。</p></li><li><p>instanceof</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.oop.Demo3;</span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money=<span class="number">10_0000_0000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"说了一句话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ctrl+H</span></span><br><span class="line"><span class="comment">//私有的东西无法被继承</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.oop.Demo3;</span><br><span class="line"><span class="comment">//学生is人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我没有说话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.say();</span><br><span class="line">        <span class="keyword">super</span>.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><blockquote><ul><li>abstract修饰符可以用来修饰方法也可以修饰类,如果修饰方法,那么该方法就是抽象方法;如果<br>修饰类，那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法,但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类,不能使用new关键字来创建对象,它是用来让子类继承的。</li><li>抽象方法，只有方法的声明,没有方法的实现,它是用来让子类实现的。</li><li>子类继承抽象类,那么就必须要实现抽象类没有实现的抽象方法,否则该子类也要声明为抽象类。</li></ul></blockquote><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><ul><li><p>普通类:只有具体实现</p></li><li><p>抽象类:具体实现和规范(抽象方法)都有!</p></li><li><p>接口:只有规范!自己无法写方法<del>专业的约束!约束和实现分离:面向接口编程</del></p></li><li><p>接口是抽象类,只有规范,如果有非抽象类implements了接口类,则必须要重载其规范(重载为方法).</p></li><li><p>接口就是规范，定义的是一组规则，体现了现实世界中”如果你…则必须能..的思想。如果你是天使，<br>则必须能飞。如果你是汽车，则必须能跑。如果你好人，则必须干掉坏人:如果你是坏人，则必须欺负好人。</p></li><li><p>接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。</p></li><li><p>oo的精髓，是对对象的抽象，最能体现这一点的就是接口。 为什么我们讨论设计模式都只针对具备了抽象能力的语言(比如C++、 java. c#等) ，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package site.oop.Demo7;</span><br><span class="line">&#x2F;&#x2F;interface定义的关键字,接口都需要有实现类</span><br><span class="line">&#x2F;&#x2F;抽象的思维~Java架构师</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">  &#x2F;&#x2F;接口中的所有定义其实都是抽象的public abstract</span><br><span class="line">    void add(String name);</span><br><span class="line">    void delete(String name);</span><br><span class="line">    void update(String name);</span><br><span class="line">    void query(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package site.oop.Demo7;</span><br><span class="line">&#x2F;&#x2F;抽象类：extends</span><br><span class="line">&#x2F;&#x2F;类 可以实现接口implements接口</span><br><span class="line">&#x2F;&#x2F;实现了接口的类就必修要重写接口的方法</span><br><span class="line">&#x2F;&#x2F;多继承~利用接口实现</span><br><span class="line">public class UerServiceImpl implements UserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void add(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void delete(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void update(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void query(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a><strong>异常机制</strong></h3><blockquote><ul><li><p>异常分类</p><blockquote><ul><li><p>检查性异常</p><blockquote><p>检查性异常:最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。<br>例如要打开一一个不存在文件时，-一个异常就发生了，这些异常在编译时不能被简单地忽略。</p></blockquote></li><li><p>运行时异常</p><blockquote><p>运行时异常:运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在<br>编译时被忽略。</p></blockquote></li><li><p>错误ERRO</p><blockquote><p>错误ERROR:错误不是异常， 而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，<br>当栈溢出时， -一个错误就发生了，它们在编译也检查不到的。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//ctrl+alt+T自动生成异常捕获</span></span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;javaSE基础&quot;&gt;&lt;a href=&quot;#javaSE基础&quot; class=&quot;headerlink&quot; title=&quot;javaSE基础&quot;&gt;&lt;/a&gt;javaSE基础&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://yj196.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>学习计划表</title>
    <link href="https://yj196.github.io/2020/04/15/Java%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>https://yj196.github.io/2020/04/15/Java%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</id>
    <published>2020-04-15T11:32:07.690Z</published>
    <updated>2020-04-15T11:39:11.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java学习计划表"><a href="#java学习计划表" class="headerlink" title="java学习计划表"></a>java学习计划表</h3><a id="more"></a><p> <img src="q8s0ri74t.bkt.clouddn.com/20200415183458.png" alt=" java计划 java"><br> <img src="q8s0ri74t.bkt.clouddn.com/20200415184034.png" alt=" java java ">  </p><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><blockquote><h2 id="a-week"><a href="#a-week" class="headerlink" title="a week"></a>a week</h2><blockquote><ol><li>1~2篇博客</li><li>狂神Java学习计划</li><li>清华大学的数据结构与算法  </li><li>清华大学操作系统  </li><li>清华大学网络  </li></ol></blockquote></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;java学习计划表&quot;&gt;&lt;a href=&quot;#java学习计划表&quot; class=&quot;headerlink&quot; title=&quot;java学习计划表&quot;&gt;&lt;/a&gt;java学习计划表&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://yj196.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Markdown使用方法</title>
    <link href="https://yj196.github.io/2020/04/14/Markdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://yj196.github.io/2020/04/14/Markdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-04-14T09:13:24.000Z</published>
    <updated>2020-04-20T09:53:18.026Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown使用方法</p><a id="more"></a><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><em>加斜</em><br><strong>加粗</strong><br><strong><em>加粗加斜</em></strong><br><del>删除线</del></p><hr><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><h2 id="下划线-1"><a href="#下划线-1" class="headerlink" title=" 下划线  "></a> <u>下划线</u>  </h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>123[^123]<br>[^123]:1233445667  </p><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>123</li><li>1234</li><li>123</li></ul><ol><li><p>1234</p></li><li><p>234</p></li><li><p>123  </p><ul><li>123  </li><li>123</li><li>213  </li></ul></li><li><p>123</p><ul><li>123</li><li>123</li></ul></li></ol><hr><h3 id="区域块"><a href="#区域块" class="headerlink" title="区域块"></a>区域块</h3><blockquote><p>区域块<br>区域块1</p><blockquote><p>小区域块</p><blockquote><p>小区域块</p></blockquote></blockquote></blockquote><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>int i=0;char y</code></pre><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="www.baidu.com">百度</a><br>&lt;<a href="http://www.baidu.com&gt;" target="_blank" rel="noopener">www.baidu.com&gt;</a>  </p><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/" target="_blank" rel="noopener">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><hr><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><h2 id=""><a href="#" class="headerlink" title="  "></a><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB ">  </h2><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">—–</td><td align="right"></td><td align="center"></td></tr></tbody></table><p>​     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown使用方法&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="markdown" scheme="https://yj196.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hello-world</title>
    <link href="https://yj196.github.io/2020/04/13/hello-world/"/>
    <id>https://yj196.github.io/2020/04/13/hello-world/</id>
    <published>2020-04-13T11:59:58.750Z</published>
    <updated>2020-04-15T10:32:28.687Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>hello world</p><a id="more"></a>  <p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="hello-hexo-im-younge"><a href="#hello-hexo-im-younge" class="headerlink" title="hello hexo ,im younge"></a>hello hexo ,im younge</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;title-Hello-World&quot;&gt;&lt;a href=&quot;#title-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;title: Hello World&quot;&gt;&lt;/a&gt;title: Hello World&lt;/h2&gt;&lt;p&gt;hello world&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
